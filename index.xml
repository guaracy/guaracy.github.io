<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cadafalso</title>
    <link>https://guaracy.github.io/index.xml</link>
    <description>Recent content on Cadafalso</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Thu, 02 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://guaracy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>De nikola para Hugo</title>
      <link>https://guaracy.github.io/post/de-nikola-para-hugo/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/de-nikola-para-hugo/</guid>
      <description>&lt;h1 id=&#34;introdução&#34;&gt;Introdução&lt;/h1&gt;

&lt;p&gt;Um dos motivos para a utilização do nikola na primeira fase de construção deste site foi a possibilidade de trabalhar com arquivos no formato org-mode. É claro que as facilidades de instalação e &lt;em&gt;deploy&lt;/em&gt; influenciaram na escolha.&lt;/p&gt;

&lt;p&gt;De qualquer forma, tinham algumas coisinhas que não estavam bem integradas com o emacs. Após algums STFW, descobri que o &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://github.com/spf13/hugo/pull/3001&#34; title=&#34;recentemente&#34;&gt;recentemente&lt;/a&gt;, começou a aceitar documentos no formato org-mode. A abordagem dos dois é diferente. Enquanto o nikola usa o proprio emacs para gerar o .html e depois converter, o Hugo utiliza um módulo (escrito em Go). Olhando o site do &lt;a href=&#34;https://chaseadams.io/getting-started-with-emacs/&#34; title=&#34;Chase&#34;&gt;Chase&lt;/a&gt;, que desenvolveu o parser para os arquivos .org, e descobri que é mais um novo usuário que se encantou com o &lt;a href=&#34;http://orgmode.org/worg/org-screenshots.html&#34; title=&#34;org-mode&#34;&gt;org-mode&lt;/a&gt; e o emacs.&lt;/p&gt;

&lt;p&gt;O Hugo, pelo menos por enquanto, não é tão amigável como o Nikola para algumas tarefas mas, para outras, sou obrigado a tirar o chapéu. Existem diversas &lt;a href=&#34;http://gohugo.io/tools/&#34; title=&#34;ferramentas&#34;&gt;ferramentas&lt;/a&gt; que cobrem a migração de um blog antigo para o Hugo (não tem Nikola), o &lt;em&gt;deploy&lt;/em&gt; do site, diversos &lt;em&gt;frontends&lt;/em&gt; que dispensam um editor, &lt;em&gt;plugins&lt;/em&gt; para editores (inclusive para emacs). Mas o mais legal, pelo menos eu achei, é que basta gravar as alterações em algum post, arquivo de configuração, etc., que elas são imediatamente detectadas, os procedimentos necessários são executados e o navegador é atualizado.&lt;/p&gt;

&lt;p&gt;Se você estiver interessado, existe uma discussão no &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/5wibiv/hugo_v019_with_native_emacs_orgmode_content/&#34; title=&#34;reddit&#34;&gt;reddit&lt;/a&gt; sobre o suporte do hugo para org-mode.&lt;/p&gt;

&lt;h1 id=&#34;instalação&#34;&gt;Instalação&lt;/h1&gt;

&lt;p&gt;Primeiro é necessário instalar o &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;, é claro. Veja se a sua distribuição possui nos repositórios para a instalação ou siga os passos da página. Para utilizar o script de &lt;em&gt;deploy&lt;/em&gt; que se encontra abaixo, você deverá ter instalado o &lt;a href=&#34;https://github.com/davisp/ghp-import&#34; title=&#34;ghp-import&#34;&gt;ghp-import&lt;/a&gt;. Como estava usando o Nikola, já tinha instalado. Pode ser que sua distro disponha para a instalação.&lt;/p&gt;

&lt;p&gt;O primeiro passo é criar um diretorio &lt;code&gt;&amp;lt;usuário&amp;gt;github.io&lt;/code&gt; no GitHub. Podemos ter os seguintes passos para criar um blog na pasta &lt;code&gt;~/myblog&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  git clone https://github.com/guaracy.github.io.git ~/myblog
  &lt;span style=&#34;color: #008000&#34;&gt;cd&lt;/span&gt; ~/myblog
  git checkout -b &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
  hugo new site myblog
  mv myblog/* .
  rm -r myblog
  git clone https://github.com/beli3ver/hemingway2.git themes/hemingway2
  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;theme = \&amp;quot;hemingway2\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
  hugo new post/primeiro.md
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Foi escolhido o tema &lt;strong&gt;hemingway2&lt;/strong&gt; mas você pode escolher outro &lt;a href=&#34;https://themes.gohugo.io/&#34; title=&#34;tema&#34;&gt;tema&lt;/a&gt; que achar melhor (trocando o nome do tema nas instruções acima). Verifique as instruções de instalação e veja os comentários na pasta do tema para saber como configurá-lo. Agora você pode digitar o comando abaixo e&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  hugo serve
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;abrir no seu navegado &lt;code&gt;localhost:1313&lt;/code&gt; . Se tudo deu certo, você verá o seu site. Você pode abrir e verificar o arquivo &lt;code&gt;config.toml&lt;/code&gt; alterado a variável &lt;code&gt;baseURL&lt;/code&gt; para https://usuário.github.io, o titulo do site e grave. Altere também o post que você criou e deve estar em &lt;code&gt;content/post/primeiro.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para criar o site, apenas digite &lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;deploy&#34;&gt;Deploy&lt;/h1&gt;

&lt;p&gt;Criei um script que funciona da mesma forma que o Nikola. Colocará no &lt;em&gt;branch&lt;/em&gt; master o conteúdo do site e no &lt;em&gt;branch&lt;/em&gt; source o conteúdo de desenvolvimento. Existem outras formas, mas vamos ficar no KISS. Se o script for chamado com um parâmetro, será assumido como mensagem para o &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#!/usr/bin/bash&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;
      &lt;span style=&#34;color: #19177C&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Rebuild on `date`&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;color: #19177C&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fi&lt;/span&gt;

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;** Atualizando site&amp;quot;&lt;/span&gt;
  hugo

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;\n\n** Enviandopara o GitHub - master&amp;quot;&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
  git rev-parse &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
  ghp-import -n -m &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; -p -r origin -b master public

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;\n\n** Enviandopara o GitHub - source&amp;quot;&lt;/span&gt;
  git push -u origin &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h1&gt;

&lt;p&gt;O org-mode do hugo ainda não está 100% mas funciona. Como o autor usa emacs, org-mode e hugo, é mais fácil que mantenha atualizado e faça melhorias.&lt;/p&gt;

&lt;p&gt;Sobre os temas, parece que o site mostra do atualizado mais recente para o menos. Fica por sua conta e risco utilizar um thema muito antigo. Pode ser que você tenha que efetuar alguma alteração para que ele funcione corretamente em versões mais novas ou futuras do hugo.&lt;/p&gt;

&lt;p&gt;Como eu tinha poucas entradas no blog feito com o nikola, foi fácil converter os cabeçalhos para se adaptar ao hugo. Se tiver muitos posts, pode ser necessário fazer um script para efetuar as alterações ou esperar que alguém desenvolva para você.]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parser - extraindo dados de páginas</title>
      <link>https://guaracy.github.io/post/parser-extraindo-dados-de-paginas/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/parser-extraindo-dados-de-paginas/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;O &lt;code&gt;parser&lt;/code&gt; é a versão de &lt;strong&gt;Rebol&lt;/strong&gt; (consequentemente de &lt;a class=&#34;reference external&#34; href=&#34;http://www.red-lang.org/&#34;&gt;Red&lt;/a&gt;) para as &lt;a class=&#34;reference external&#34; href=&#34;https://pt.wikipedia.org/wiki/Express%C3%A3o_regular&#34;&gt;expressões regulares&lt;/a&gt; (RE). A maior diferença é que o parser de Red é perfeitamente integrado a linguagem, possuindo uma maior verbosidade mas sendo menos criptográfico (YMMV). Não posso deixar de mencionar o &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/Icon_(programming_language)#String_scanning&#34;&gt;string scanning&lt;/a&gt; de Icon já que foi a segunda forma que conheci. Infelizmente o pessoal de Icon resolveu fazer uma nova versão em Go (outra linguagem baseada em Icon) e deixaram de fora esta parte que era uma das mais interessantes da linguagem e passaram a utilizar RE).&lt;/p&gt;
&lt;p&gt;O parser de Red nada mais é do que uma DSL &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/red/red/blob/master/runtime/parse.reds&#34;&gt;escrita&lt;/a&gt; na própria linguagem.&lt;/p&gt;
&lt;p&gt;Basicamente é um ponteiro que percorre um determinado texto seguindo determinadas regras e geralmente utilizado para:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;seleção e extração de textos;&lt;/li&gt;
&lt;li&gt;validação de textos;&lt;/li&gt;
&lt;li&gt;alteração de textos.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class=&#34;section&#34; id=&#34;introducao&#34;&gt;
&lt;h1&gt;Introdução&lt;/h1&gt;
&lt;p&gt;A estrutura do &lt;cite&gt;parser&lt;/cite&gt; é &lt;code&gt;parser entrada regras&lt;/code&gt; onde &lt;strong&gt;regras&lt;/strong&gt; é um bloco contendo as regras que serão aplicadas na entrada. Antes de nos aventurarmos em alguns exemplos, é necessário conhecer algumas diretivas que podem ser utilizadas nas regras.&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;to &amp;lt;val&amp;gt;&lt;/strong&gt; : Procura por &amp;lt;val&amp;gt; e posiciona o ponteiro no início da ocorrência ou no final da entrada, se não encontrar. &lt;cite&gt;end&lt;/cite&gt; indica para posicionar no final do arquivo.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111-AAA&amp;quot; [to &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;-AAA&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;2. &lt;strong&gt;thru &amp;lt;val&amp;gt;&lt;/strong&gt; : Procura por &amp;lt;val&amp;gt; e posiciona o ponteiro após a ocorrência&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111-AAA&amp;quot; [thru &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;AAA&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;3. &lt;strong&gt;collect&lt;/strong&gt; e &lt;strong&gt;keep&lt;/strong&gt; : O &lt;cite&gt;collect&lt;/cite&gt; indica que deverão ser coletados em um bloco os dados posteriores que forem precedidos por &lt;cite&gt;keep&lt;/cite&gt; como pode ser visto nos exemplos acima (note que no exemplo abaixo não estamos trabalhando com texto e sim com um bloco em Red; é a vantagem da integração do &lt;cite&gt;parse&lt;/cite&gt;).&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; collect [1 2 keep 3 keep 4 5 keep 6]
== [3 4 6]
&lt;/pre&gt;
&lt;p&gt;4. &lt;strong&gt;any&lt;/strong&gt;, &lt;strong&gt;some&lt;/strong&gt; e &lt;strong&gt;inteiro&lt;/strong&gt; : O &lt;cite&gt;any&lt;/cite&gt; repete a regra zero ou mais vezes, o &lt;cite&gt;some&lt;/cite&gt; uma ou mais vezes e o &lt;cite&gt;inteiro&lt;/cite&gt; repete a regra um número especificado de vezes.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;AA-BBCDEF&amp;quot; [2 &amp;quot;A&amp;quot; some &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;BBCDEF&amp;quot;]
red&amp;gt;&amp;gt; parse &amp;quot;AA-BBCDEF&amp;quot; [any &amp;quot;x&amp;quot; collect keep to end]
== [&amp;quot;AA-BBCDEF&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;5. &lt;strong&gt;[n] skip&lt;/strong&gt; : Avança o ponteiro uma ou mais posições&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111++222&amp;quot; [to &amp;quot;+&amp;quot; collect keep to end]
== [&amp;quot;++222&amp;quot;]
red&amp;gt;&amp;gt; parse &amp;quot;111++222&amp;quot; [to &amp;quot;+&amp;quot; 2 skip collect keep to end]
== [&amp;quot;222&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;6. &lt;strong&gt;copy&lt;/strong&gt; &amp;lt;var&amp;gt; : Copia o valor que casar para a variável especificada. Diferente de ERs, não existem variáveis predefinidas como $1, $2, etc..&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;122.444.666&amp;quot; [thru &amp;quot;.&amp;quot; copy v to &amp;quot;.&amp;quot; (print [&amp;quot;2º :&amp;quot; v])]
2º : 444
&lt;/pre&gt;
&lt;p&gt;Bem, existem diversas outras diretivas e combinações, mas já é possível brincar com o que foi apresentado aqui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;exemplo-do-aurelio&#34;&gt;
&lt;h1&gt;Exemplo do Aurélio&lt;/h1&gt;
&lt;p&gt;O &lt;a class=&#34;reference external&#34; href=&#34;http://aurelio.net&#34;&gt;Aurélio&lt;/a&gt;, se não é o cara que mais entende de ER, é o que melhor sabe explicar este assunto complexo. Vou pegar a vídeo-aula que ele fez de &lt;a class=&#34;reference external&#34; href=&#34;http://aurelio.net/blog/2011/05/05/como-extrair-e-formatar-texto-usando-expressoes-regulares/&#34;&gt;Como extrair e formatar texto usando Expressões Regulares&lt;/a&gt; e adaptá-la para o Red e o parse. Na primeira parte, iremos copiar a página para analisar. Na segunda iremos ler diretamente da página html.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;primeira-parte&#34;&gt;
&lt;h2&gt;Primeira parte&lt;/h2&gt;
&lt;p&gt;Para esta parte, como no vídeo acima, iremos copiar (da linha &lt;em&gt;quot&lt;/em&gt; até a linha &lt;em&gt;diams&lt;/em&gt; e pode ser todas as colunas) os dados &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML&#34;&gt;desta&lt;/a&gt; tabela da wikipedia e gravar em uma arquivo &lt;tt class=&#34;docutils literal&#34;&gt;page.txt&lt;/tt&gt; no mesmo diretório onde irá rodar o nosso programa em Red.
O arquivo .txt terá o seguinte conteúdo:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
quot  &amp;quot;      U+0022 (34)     HTML 2.0        HTMLspecial     ISOnum  quotation mark (APL quote)
amp   &amp;amp;      U+0026 (38)     HTML 2.0        HTMLspecial     ISOnum  ampersand
apos  &#39;      U+0027 (39)     XHTML 1.0       HTMLspecial     ISOnum  apostrophe (apostrophe-quote); see below
lt    &amp;lt;      U+003C (60)     HTML 2.0        HTMLspecial     ISOnum  less-than sign
.....
diams ♦      U+2666 (9830)   HTML 4.0        HTMLsymbol      ISOpub  black diamond suit[f]
&lt;/pre&gt;
&lt;p&gt;O script para processar o bloco de texto e pegar apenas quatro valores das três primeiras colunas (nome, caractere, valor hexadecimal e valor decimal) fica como abaixo:&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;ln&#34;&gt; 1 &lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3 &lt;/span&gt; &lt;span class=&#34;generic subheading&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;name decorator&#34;&gt;%page.txt&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5 &lt;/span&gt; &lt;span class=&#34;generic subheading&#34;&gt;rule:&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6 &lt;/span&gt;    &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;nome&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;caractere&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;hexadecimal&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;sp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;decimal&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12 &lt;/span&gt;      &lt;span class=&#34;generic strong&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;nome&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;caractere&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;hexadecimal&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;decimal&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;newline&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14 &lt;/span&gt;    &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15 &lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17 &lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;rule&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Após a execução, teremos uma saída assim (eliminamos as colunas indesejadas e separamos os valores decimal e hexadecimal referente ao caractere):&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
quot    &amp;quot;       22      34
amp     &amp;amp;       26      38
apos    &#39;       27      39
lt      &amp;lt;       3C      60
...
diams   ♦       2666    9830
&lt;/pre&gt;
&lt;p&gt;Vejamos o que faz cada linha do script.&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;Red []&lt;/strong&gt; é o cabeçalho necessário para que scripts possam ser executados. No interior do bloco [] podemos ter diversas informações e diretivas.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;3&#34;&gt;
&lt;li&gt;Lê o conteúdo do arquivo &lt;tt class=&#34;docutils literal&#34;&gt;page.txt&lt;/tt&gt; e o coloca na variável &lt;tt class=&#34;docutils literal&#34;&gt;page&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;5&#34;&gt;
&lt;li&gt;Inicializa o bloco de regras com o nome de &lt;tt class=&#34;docutils literal&#34;&gt;rule&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Diz para executar o próximo bloco 0 ou mais vezes.&lt;/li&gt;
&lt;li&gt;Copia para a variável &lt;tt class=&#34;docutils literal&#34;&gt;nome&lt;/tt&gt; o conteúdo da entrada até encontrar um &lt;tt class=&#34;docutils literal&#34;&gt;tab&lt;/tt&gt; (tabulação) e avança o ponteiro.&lt;/li&gt;
&lt;li&gt;O mesmo da linha 7 para a variável caractere. Eu poderia colocar nomes mais curtos nas variáveis como v1, v2, etc. mas preferi legibilidade (nem sei se poderia chegar a concisão de uma ER).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o &amp;quot;+&amp;quot; e incrementa o ponteiro enquanto achar algum &amp;quot;0&amp;quot; (zero)&lt;/li&gt;
&lt;li&gt;Copia o conteúdo para a variável hexadecimal até encontrar um espeço (sp).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o &amp;quot;(&amp;quot; e copia para a variável decimal o conteúdo até o &amp;quot;)&amp;quot;&lt;/li&gt;
&lt;li&gt;Imprime uma linha com o conteúdo das variáveis separados por uma tabulação. Aqui também mostra a integração do parse com a linguagem permitindo que as variáveis sejam processadas da forma que o usuário desejar (poderia até converter para klingon).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o final da linha.&lt;/li&gt;
&lt;li&gt;Fecha o &lt;tt class=&#34;docutils literal&#34;&gt;any&lt;/tt&gt; aberto na linha 6 e, se ainda tiver algum conteúdo na entrada, o processamento será repetido.&lt;/li&gt;
&lt;li&gt;Fecha o bloco da regra aberto na linha 5.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;17&#34;&gt;
&lt;li&gt;Aplica a regra da linha 5 no texto lido na linha 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Parece complicado mas é bem simples. Algumas vezes parece complicado e realmente é mais complicado do que parece.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;segunda-parte&#34;&gt;
&lt;h2&gt;Segunda parte&lt;/h2&gt;
&lt;p&gt;O processo anterior pode ser válido em diversos casos. Existem outros como, por exemplo, os valores sofrem alteração no decorrer de um período ou são diversas páginas e fica impraticável copiar e colar cada vez. No próximo artigo veremos um exemplo real e mais complexo. Por enquanto ficaremos com o mesmo para facilitar mas com uma abordagem um pouco diferente.&lt;/p&gt;
&lt;p&gt;Iremos ler o conteúdo da página .html, aplicaremos as regras e coletaremos todas as informações para ser trabalhada posteriormente. Para você criar uma regra para extrair dados de um determinado texto ou outro documento, é necessário que você analise antes para poder aplicar os padrões.&lt;/p&gt;
&lt;p&gt;Analisando a página da wikipedia, podemos ver que a tabela que queremos é a terceira (existem outra formas de encontrar a tabela). Como pode ser visto no trecho abaixo, após a tag &lt;cite&gt;&amp;lt;table&amp;gt;&lt;/cite&gt; temos uma &lt;cite&gt;&amp;lt;th&amp;gt;&lt;/cite&gt; que é o cabeçalho e, após, diversas tags &lt;cite&gt;&amp;lt;tr&amp;gt;&lt;/cite&gt; que iniciam as linhas com as informações que desejamos. Nossas informações estarão entre &lt;cite&gt;&amp;lt;td&amp;gt;&lt;/cite&gt; e &lt;cite&gt;&amp;lt;/td&amp;gt;&lt;/cite&gt;. No início já é possível perceber que teremos um problema que deverá ser resolvido posteriormente. Em &lt;cite&gt;amp&lt;/cite&gt; a página contém &lt;cite&gt;&amp;amp;amp;&lt;/cite&gt; já que o &amp;amp; não pode ser usado isoladamente. Poderemos ter uma função para efetuar essas conversões que não seria tão difícil ou usar um programa externo como &lt;code&gt;cat arquivo | recode html..ascii&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;wikitable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;background: #efefef;&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Character&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Unicode code point (decimal)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Standard&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Description&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;quot&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot;&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;U+0022 (34)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;XML 1.0&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;double &lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;/wiki/Quotation_mark&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;Quotation mark&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;quotation mark&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;amp&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;name entity&#34;&gt;&amp;amp;amp;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;U+0026 (38)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;XML 1.0&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;/wiki/Ampersand&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;Ampersand&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;ampersand&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;O nosso programa poderia ficar assim:&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;ln&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;name decorator&#34;&gt;https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;rule-html:&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6 &lt;/span&gt;   &lt;span class=&#34;literal number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;&amp;lt;table&amp;quot;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7 &lt;/span&gt;   &lt;span class=&#34;name variable&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9 &lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/td&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; name
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/td&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; char
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; hexa
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; decimal
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14 &lt;/span&gt;      &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15 &lt;/span&gt;   &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16 &lt;/span&gt;   &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17 &lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;tabela:&lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;rule-html&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;O programa nem ficou tão diferente do primeiro (o ; indica início de comentário), que analisa apenas um arquivo texto, e ainda podemos ver algumas características da linguagem. A primeira é que foi usado &lt;strong&gt;read&lt;/strong&gt; para ler um arquivo texto e uma página https. A segunda, por ser uma linguagem rica em tipos de dados, usamos apenas &amp;lt;td&amp;gt; e não &amp;quot;&amp;lt;td&amp;gt;&amp;quot; para a verificação de conteúdo. Aqui também usamos &lt;strong&gt;collect&lt;/strong&gt; pois queremos que todos os dados sejam extraídos e armazenados para futuro processamento.&lt;/p&gt;
&lt;p&gt;Inicialmente inicializamos o ponteiro na terceira ocorrência de &lt;cite&gt;&amp;lt;table&lt;/cite&gt;, usamos um &lt;cite&gt;collect&lt;/cite&gt; para que as informações sejam armazenadas em um bloco e, um segundo &lt;cite&gt;collect&lt;/cite&gt; para que cada linha tenha seu próprio bloco.  O resultado após rodar o programa é que tabela conterá algo assim:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
[[&amp;quot;quot&amp;quot; #&amp;quot;^&amp;quot;&amp;quot; &amp;quot;22&amp;quot; &amp;quot;34&amp;quot;] [&amp;quot;amp&amp;quot; &amp;quot;&amp;amp;amp;&amp;quot; &amp;quot;26&amp;quot; &amp;quot;38&amp;quot;] [&amp;quot;apos&amp;quot; #&amp;quot;&#39;&amp;quot; &amp;quot;27  ....  ]]
&lt;/pre&gt;
&lt;p&gt;É claro que eu não poderia deixar o leitor a ver navios e ficar saber como tratar os casos onde o segundo elemento não é um caractere. Como o quarto elemento de cada linha é o código do caractere, basta percorrer todas as linhas da tabela e trocar o segundo elemento pelo caractere cujo o código está no quarto elemento. Podemos aproveitar e converter o quarto elemento de string para inteiro. O loop abaixo faz isso (O Red [] é necessário para que o pygmentize colorize o código corretamente).&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;name builtin&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;tabela&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;to-integer&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4&lt;/span&gt;
    &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/2:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;to-char&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4&lt;/span&gt;
&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Após ler o artigo e entender as semelhanças e diferenças entre a regra para extrair os dados do texto e da página, você está apto a encarar novos desafios.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;conclusao&#34;&gt;
&lt;h1&gt;Conclusão&lt;/h1&gt;
&lt;p&gt;Podemos ver que o parser como alternativa de Red/Rebol para expressões regulares é bastante poderoso e, se possui a desvantagem de ser mais verboso, possui a vantagem de ser mais legível (se você não souber ER, é claro). Sem desmerecer as expressões regulares, a integração do &lt;em&gt;parse&lt;/em&gt; com a linguagem deixa visualmente mais agradável, não parecendo uma prótese alienígena no seu código.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Gerenciando Blog Estático</title>
      <link>https://guaracy.github.io/post/gerenciando-blog-estatico/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/gerenciando-blog-estatico/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;div class=&#34;section&#34; id=&#34;introducao&#34;&gt;
&lt;h1&gt;Introdução&lt;/h1&gt;
&lt;p&gt;Fora a facilidade de uso, o outro motivo importante de escolher o Nikola como gerenciador de blog estático foi a possibilidade de editar as entradas no formato &lt;a class=&#34;reference external&#34; href=&#34;http://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; diretamente, isto é, edito direto no formato org e mando o Nikola gerar o blog. Poderia converter para .rst ou .md mas as etapas intermediárias são chatas e podem resultar em erros difíceis de serem resolvidos ou localizados. Não, não é apenas mais uma linguagem de marcação. É a linguagem de marcação definitiva.&lt;/p&gt;
&lt;p&gt;Usar o emacs não é nenhum bicho de sete cabeças. Para quem usa o vim, existe o &lt;a class=&#34;reference external&#34; href=&#34;http://spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt; que foi feito pensando nesses usuários. Mesmo funcionamento do teclado (nunca usei i vim para confirmar) com o coração do emacs. Muitos profissionais de outras áreas (principalmente educação) fizeram a troca apenas para usar o org-mode. O &lt;a class=&#34;reference external&#34; href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2014/08/08/What-we-are-using-org-mode-for/&#34;&gt;John Kitchin&lt;/a&gt;, por exemplo, utiliza org-mode para escrever artigos científicos e livros, agenda profissional/pessoal, apresentações e até para lecionar indo desde a preparação do material até a avaliação dos alunos como pode ser visto neste &lt;a class=&#34;reference external&#34; href=&#34;https://www.youtube.com/watch?v=cRUCiF2MwP4&#34;&gt;vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;blog-admin&#34;&gt;
&lt;h1&gt;blog-admin&lt;/h1&gt;
&lt;p&gt;O &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/guaracy/blog-admin&#34;&gt;blog-admin&lt;/a&gt; facilita a administração de um blog criado pelo hexo, org-page e Nikola (que é o que me interessa) utilizando o emacs. A aparência é assim:&lt;/p&gt;
&lt;img alt=&#34;/images/blog-admin.png&#34; src=&#34;https://guaracy.github.io/images/blog-admin.png&#34; /&gt;
&lt;p&gt;As operações ficam a uma tecla de distância e as entradas disponíveis na tabela sendo facilmente visualizadas (data, rascunho, título). Só pela visualização já seria um facilitador e é como está sendo usado neste momento. Já fiz um fork do repositório do GitHub e pretendo efetuar as alterações necessárias para que se ajuste ao meu fluxo de trabalho e corrigir alguns probleminhas.&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; : Altera entre o modo rascunho e publicação&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; : Funcionou corretamente. Provavelmente seria utilizados apenas para apagar posts marcados como &lt;tt class=&#34;docutils literal&#34;&gt;draft&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt; : Não testei mas também não sei quando iria duplicar um post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; : Funcionou corretamente mas deveria ter a opção para outros formatos e não apenas .rst.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RET&lt;/strong&gt; : Enter e o emacs abre o post corretamente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;r&lt;/strong&gt; : Apenas escaneia o diretório para refazer a estrutura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; : Não funcionou com posts .org que necessitem de uma intervenção.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt; : Apenas abre o arquivo de configuração &lt;tt class=&#34;docutils literal&#34;&gt;conf.py&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; : Preciso verificar melhor se existe uma configuração para entregar direto no GitHub.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt; : Filtrou corretamente as entradas quando um título tinha o termo indicado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretendo criar mais uma opção. Talvez um &lt;strong&gt;L&lt;/strong&gt; para testar localmente. Iria executar &lt;cite&gt;nikola build ; nikola serve -b&lt;/cite&gt; para gerar e abrir no navegador padrão do sistema. Apesar do &lt;strong&gt;w3m&lt;/strong&gt; oferecer uma boa visualização de sites, não é uma opção.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;conclusao&#34;&gt;
&lt;h1&gt;Conclusão&lt;/h1&gt;
&lt;p&gt;Precisa de umas alterações mas já mostrou ser uma boa opção para quem trabalha com sites estáticos e emacs. Resolvi fazer um vídeo mostrando um pouco o funcionamento do blog-admin mas, talvez, com um pouco de enfase na digitação de um documento usando o org-mode. Especificamente na digitação de trechos de código em três linguagens sendo o resultado calculado e apresentado diretamente, evitando o problema de digitar o resultado incorretamente ou ter que rodar o programa externamente, copiar o resultado e colar no documento.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ehgwjtapwsytr0txgr7h6v36x.js&#34; id=&#34;asciicast-ehgwjtapwsytr0txgr7h6v36x&#34; async&gt;&lt;/script&gt;&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;atualizacoes&#34;&gt;
&lt;h1&gt;Atualizações&lt;/h1&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Adicionei a possibilidade de utilizar &lt;code&gt;nikola github_deploy&lt;/code&gt; para facilitar a entrega no GitHub.&lt;/li&gt;
&lt;li&gt;Adicionei a opção &lt;strong&gt;&amp;quot;O&amp;quot;&lt;/strong&gt; no menu para abrir o site em um navegar externo. Falta incluir a opção para o usuário escolher o navegador (está o &lt;cite&gt;firefox&lt;/cite&gt;). Necessita do &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/skeeto/emacs-web-server&#34;&gt;emacs-web-server&lt;/a&gt;. Funciona como &lt;tt class=&#34;docutils literal&#34;&gt;nikola serve &lt;span class=&#34;pre&#34;&gt;-b&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As alterações ainda não estão no GitHub mas esta postagem já foi feita com a versão loca atualizada do blog-admin. É só pressionar &amp;quot;B&amp;quot; para recriar o site, &amp;quot;O&amp;quot; para testar no firefox se está tudo ok e um &amp;quot;D&amp;quot; para enviar para o GitHub.&lt;/p&gt;
&lt;img alt=&#34;/images/ba-git.png&#34; src=&#34;https://guaracy.github.io/images/ba-git.png&#34; /&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rótulos na linha de comando</title>
      <link>https://guaracy.github.io/post/rotulos-na-linha-de-comando/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/rotulos-na-linha-de-comando/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Vamos discorrer sobre dois tópicos:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Edição de linha de comando complexa e;&lt;/li&gt;
&lt;li&gt;Colocar rótulos na linha de comando para que possa ser chamada posteriormente&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class=&#34;section&#34; id=&#34;edicao&#34;&gt;
&lt;h1&gt;Edição&lt;/h1&gt;
&lt;p&gt;Algumas vezes temos uma sequência de comandos que queremos executar. Podemos digitar os comandos individualmente, podemos criar um script e salvar os comandos e até podemos separá-los com &lt;code&gt;;&lt;/code&gt; em alguns casos. Mas existe outra forma simples que seria utilizar o nosso editor padrão que deverá estar no &lt;em&gt;.[bashzsh]rc&lt;/em&gt; como &lt;em&gt;$EDITOR=seueditor&lt;/em&gt;. Para tal, basta Pressionar &lt;code&gt;Ctrl+x Ctrl+e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Com isto, será aberto o editor com um nome de arquivo temporário e você poderá utilizar seu editor para informar a sequência de comandos desejada. Veja o vídeo abaixo &lt;a class=&#34;footnote-reference&#34; href=&#34;#id2&#34; id=&#34;id1&#34;&gt;[1]&lt;/a&gt;
Ao término, basta salvar e fechar o editor. No caso do &lt;a class=&#34;reference external&#34; href=&#34;http://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;, a sequência de comandos estará disponível na shell só esperando você pressionar um &lt;em&gt;enter&lt;/em&gt;. No bash já executa os comandos um a um (motivo 1 para trocar de shell).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;tags&#34;&gt;
&lt;h1&gt;Tags&lt;/h1&gt;
&lt;p&gt;Algumas vezes precisamos executar um ou uma sequência de comandos diversas vezes (mas não é o suficiente para criar um script, chmod +x, etc.). Uma forma prática é utilizar o método anterior e colocar no final um rótulo para que possamos recuperar os comandos a qualquer momento com o &lt;code&gt;Ctrl+r&lt;/code&gt; para efetuar a busca. Poderíamos colocar no final do nosso arquivo anterior um comentário como &lt;em&gt;#script&lt;/em&gt;. Aí é só digitar Ctrl+r e script que ele irá aparecer. É só pressionar Enter para executar novamente ou, Ctrl+x Ctrl+e para editá-lo afinal, humanos podem errar. Como o bash executa os comandos individualmente, no histórico irá ficar só o comentário (motivo 2 para trocar de shell).&lt;/p&gt;
&lt;table class=&#34;docutils footnote&#34; frame=&#34;void&#34; id=&#34;id2&#34; rules=&#34;none&#34;&gt;
&lt;colgroup&gt;&lt;col class=&#34;label&#34; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr&gt;&lt;td class=&#34;label&#34;&gt;&lt;a class=&#34;fn-backref&#34; href=&#34;#id1&#34;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Vídeo ascii exemplificando o post&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101484.js&#34; id=&#34;asciicast-101484&#34; async&gt;&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Temas no Nikola</title>
      <link>https://guaracy.github.io/post/temas-no-nikola/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/temas-no-nikola/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;O meu objetivo não é ser webdesiner ou coisa parecida. Apenas ter um local onde possa ser facilmente ser armazenadas e disponibilizadas as informações. A escolha no &lt;a class=&#34;reference external&#34; href=&#34;https://getnikola.com/&#34;&gt;Nikola&lt;/a&gt; se deu, em parte, pela facilidade de uso. Até para entregar no GitHub é simples.&lt;/p&gt;
&lt;p&gt;Como resolvi fazer alguns ajustes no site, resolvi colocar aqui o que foi feito para facilitar qualquer trabalho futuro. Não eram necessários Basicamente alguns ícones no menu e alguns botões sociais no rodapé.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class=&#34;sidebar&#34;&gt;
&lt;p class=&#34;first sidebar-title&#34;&gt;Nikola - Fluxo de tarefas&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Criação do site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikola init site&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Criação/edição de entradas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikola new_post -e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Criação e teste o site localmente&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikola build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikola serve -b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Colocar site GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;&lt;code&gt;nikola github_deploy&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;De qualquer forma, queremos um site com uma apresentação simples mas que seja visualmente agradável (não precisa ser aqueles sites da década de 40; até o site do &lt;a class=&#34;reference external&#34; href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; está mais moderno) mas não queremos aprender a criar novos temas, alterar CSS ou JavaScript. Nosso foco são os artigos. Abaixo, quatro formas de alterar a aparência do nosso site:&lt;/p&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;O Nikola utiliza como framework o &lt;a class=&#34;reference external&#34; href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap 3&lt;/a&gt;. A maneira mais simples de alterar cores e tipografia é visitar &lt;a class=&#34;reference external&#34; href=&#34;http://bootswatch.com/&#34;&gt;Bootswatch&lt;/a&gt;  e escolher um tema que lhe agrade. No diretório do seu site digite &lt;code&gt;nikola bootswatch_theme -s cerulean&lt;/code&gt; caso você tenha escolhido o tema Cerulean. Será criado um subdiretório &lt;cite&gt;custom&lt;/cite&gt; no diretório &lt;cite&gt;themes&lt;/cite&gt;. Depois é só editar o arquivo &lt;cite&gt;conf.py&lt;/cite&gt; e alterar o nome do tema em uso para &lt;cite&gt;custom&lt;/cite&gt; que ficará &lt;code&gt;THEME = &amp;quot;custom&amp;quot;&lt;/code&gt;. É só criar e testar o site localmente. Se você conhece um pouco de CSS, poderá efetuar algum ajuste necessário.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;A segunda maneira é escolher um tema diretamente do &lt;a class=&#34;reference external&#34; href=&#34;https://themes.getnikola.com/&#34;&gt;site&lt;/a&gt; do Nikola. Basta selecionar o tema da relação existente, ver como é a aparência e seguir as instruções que estão no site. &lt;a class=&#34;footnote-reference&#34; href=&#34;#id2&#34; id=&#34;id1&#34;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Você poderá criar um tema novo. Até pode ser interessante mas, se não for a sua área, deverá ler um pouco a respeito para aprender sobre CSS, templates, etc..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Resolvi colocar o quarto, pois achei interessante compartilhar. Gostaria de colocar uns ícones junto com as palavras do menu superior e em outros locais mas possibilidades disponíveis no Nikola não eram suficientes. Poderia utilizar alguma fonte &lt;a class=&#34;reference external&#34; href=&#34;http://fontawesome.io/&#34;&gt;Font Awesom&lt;/a&gt; mas eu considero que é muito byte para o pouco que eu precisava. Um canhão para matar uma formiga. Os procedimentos são os seguintes:&lt;/p&gt;
&lt;p&gt;4.1 Ir no site &lt;a class=&#34;reference external&#34; href=&#34;https://icomoon.io/app/&#34;&gt;IcoMoon&lt;/a&gt; e selecionar os ícones desejados (selecionei do IcoMoon Free).&lt;/p&gt;
&lt;p&gt;4.2 Clicar em Gerar Fonte.&lt;/p&gt;
&lt;p&gt;4.3 Clicar em Download.&lt;/p&gt;
&lt;p&gt;4.4 Abrir o arquivo &lt;cite&gt;icomoon.zip&lt;/cite&gt;, copiar as fontes do diretório &lt;cite&gt;fonts&lt;/cite&gt; para o diretório &lt;cite&gt;seublog/themes/custom/assets/fonts&lt;/cite&gt; e copiar o arquivo &lt;cite&gt;style.css&lt;/cite&gt; para o diretório &lt;cite&gt;seublog/themes/custom/assets/css&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;4.5 Renomeie o arquivo &lt;cite&gt;style.css&lt;/cite&gt; para &lt;cite&gt;custom.css&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;4.6 Edite o arquivo &lt;cite&gt;custom.css&lt;/cite&gt; é coloque &lt;cite&gt;../&lt;/cite&gt; no caminho para os arquivos de fontes (melhor manter a estrutura original criada de diretórios criada pelo Nikola).&lt;/p&gt;
&lt;p&gt;4.7 Ok. Sempre que você precisar de um dos símbolos &lt;span class=&#34;icon-tux&#34;&gt;&lt;/span&gt; basta incluir &lt;code&gt;&amp;lt;span class=&amp;quot;icon-tux&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; (troque &lt;cite&gt;icon-tux&lt;/cite&gt; pelo ícone desejado). Descompactando o arquivo icomoon.zip, tem um arquivo &lt;cite&gt;demo.html&lt;/cite&gt;. Abrindo-o você poderá visualizar todos os símbolos existentes. Se for em um texto, use a diretova &lt;code&gt;.. |icon-tux| raw: html&lt;/code&gt; com o código html acima.&lt;/p&gt;
&lt;p&gt;4.8 Para incluir mais algum ícone, siga os passos 4.1 até 4.6.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table class=&#34;docutils footnote&#34; frame=&#34;void&#34; id=&#34;id2&#34; rules=&#34;none&#34;&gt;
&lt;colgroup&gt;&lt;col class=&#34;label&#34; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr&gt;&lt;td class=&#34;label&#34;&gt;&lt;a class=&#34;fn-backref&#34; href=&#34;#id1&#34;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Nem todos os temas são responsivos, isto é, são apresentados adequadamente em computadores, smartphones, etc.. Pode ser interessante testar antes de adotar o tema. Não é muito legal você abrir um site em um smartphone e ver aquelas letras minúsculas, sendo obrigado a dar um zoom e ficar movendo o site para um lado e outro para ler.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Por curiosidade, o meu menu no &lt;code&gt;conf.py&lt;/code&gt; ficou assim:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;/archive.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;lt;span class=&#39;icon-folder-open&#39;&amp;gt;&amp;lt;/span&amp;gt; Arquivos&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;/categories/&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;lt;span class=&#39;icon-price-tags&#39;&amp;gt;&amp;lt;/span&amp;gt; Tags&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;/rss.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;lt;span class=&#39;icon-rss&#39;&amp;gt;&amp;lt;/span&amp;gt; RSS&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;O rodapé, com a inclusão dos ícones. Tem uma variável &lt;cite&gt;SOCIAL_BUTTONS_CODE&lt;/cite&gt; que poderia ser utilizada. Pode ser que, futuramente, veja melhor como ela funciona e alguns ajustes.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
&amp;lt;span class=&amp;quot;social-menu&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;mailto:{email}&amp;quot; title=&amp;quot;e-mail&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;icon-envelop&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;&amp;quot; title=&amp;quot;Google Plus&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;icon-google-plus&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://www.facebook.com/guaracybm&amp;quot; title=&amp;quot;Facebook&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;icon-facebook2&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/guaracybm&amp;quot; title=&amp;quot;Twitter&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;icon-twitter&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://github.com/guaracy&amp;quot; title=&amp;quot;GitHub&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;icon-github&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;br/&amp;gt;
Contents &amp;amp;copy; {date} {author} - Powered by
&amp;lt;a href=&amp;quot;https://getnikola.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Nikola&amp;lt;/a&amp;gt;         {license}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Também adicionei no &lt;cite&gt;custom.css&lt;/cite&gt; um pouco de código para formatar os ícones do rodapé. Ficou assim:&lt;/p&gt;
&lt;pre class=&#34;code css literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name class&#34;&gt;social-menu&lt;/span&gt; &lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword constant&#34;&gt;black&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;text-decoration&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword constant&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword constant&#34;&gt;x-large&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Por enquanto é só.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Seu blog no GitHub</title>
      <link>https://guaracy.github.io/post/seu-blog-no-github/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/post/seu-blog-no-github/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Para quem está impaciente (&lt;strong&gt;TL;DR&lt;/strong&gt;), basta seguir os 8 passos abaixo para ter seu blog funcionando. Mas é interessante ler o resto do texto.&lt;/p&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Crie um repositório no &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; com o nome &lt;strong&gt;usuário&lt;/strong&gt;.github.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Clone o repositório localmente&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
git clone https://github.com/usuário/usuário.github.io.git ~/blog
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Crie seu blog com o &lt;a class=&#34;reference external&#34; href=&#34;https://getnikola.com&#34;&gt;Nikola&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
cd ~/blog
nikola init meublog
mv meublog/* .
rm -r meublog
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Crie uma entrada e edite o texto&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
nikola new_post -e
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Gere o blog e teste localmente&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
nikola build
nikola serve -b
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Coloque o blog no github&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
nikola github_deploy
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Repita as etapas 4 a 6 para criar outras entradas no blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&#34;first&#34;&gt;Seja feliz.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- TEASER_END --&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;PRIMEIROS PASSOS:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;p class=&#34;first&#34;&gt;O GitHub permite que o usuário armazene páginas estáticas para servir como um site ou blog pessoal. Eles indicam utilizar o Jekyll mas eu vou usar o &lt;a class=&#34;reference external&#34; href=&#34;https://getnikola.com&#34;&gt;Nikola&lt;/a&gt;. Se você deseja informações de como criar o site com o Jekyll, o Wanderson criou um &lt;a class=&#34;reference external&#34; href=&#34;https://wandersonwhcr.github.io/github/2017/01/20/paginas-pessoais-no-github.html&#34;&gt;artigo&lt;/a&gt; sobre criação de páginas pessoais no GitHub e Jekyll&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;Basicamente o usuário apenas deverá criar um repositório com o nome &lt;strong&gt;usuário&lt;/strong&gt;.github.io que abrigará o conteúdo do site. O site ficará disponível no endereço &lt;strong&gt;`https://usuário.github.io`&lt;/strong&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;CLONANDO O SITE LOCALMENTE:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;O próximo passo é clonar o repositório para que você possa efetuar a criação, alterações, testes no site localmente antes de enviar para o GitHub. Para tanto, digite na linha de comando &lt;code&gt;git clone https://github.com/usuário/usuário.github.io.git ~/blog&lt;/code&gt;. Isto deverá clonar seu repositório em um diretório chamado &lt;cite&gt;blog&lt;/cite&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;CRIANDO O SITE LOCAL:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;p class=&#34;first&#34;&gt;Parto do princípio de que você já tenha seguido os passos do &lt;a class=&#34;reference external&#34; href=&#34;https://getnikola.com/getting-started.html&#34;&gt;site&lt;/a&gt; e instalado o Nikola. É necessário criar a estrutura do seu site digitando:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
cd ~/blog
nikola init meublog
mv meublog/* .
rm -r meublog
&lt;/pre&gt;
&lt;p&gt;O que fizemos aqui foi:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Com &lt;code&gt;cd ~/blog&lt;/code&gt; para irmos ao diretório de trabalho que foi clonado do GitHub e contém o seu site.&lt;/li&gt;
&lt;li&gt;Após &lt;code&gt;nikola init meublog&lt;/code&gt;, responda as perguntas corretamente e será criado a estrutura do site em um subdiretório chamado &lt;cite&gt;meublog&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;Usamos &lt;code&gt;mv meublog/* .&lt;/code&gt; para mover a estrutura criada pelo Nikola do subdiretório &lt;cite&gt;meublog&lt;/cite&gt; para o raiz (&lt;cite&gt;blog&lt;/cite&gt;).&lt;/li&gt;
&lt;li&gt;Finalmente, &lt;code&gt;rm -r meublog&lt;/code&gt; irá remover o subdiretório &lt;cite&gt;meublog&lt;/cite&gt; que não é mais necessário.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&#34;last&#34;&gt;Agora podemos começar a entrar com as páginas para, depois, entregar o nosso blog ao público.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;CRIANDO AS PÁGINAS:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;p class=&#34;first&#34;&gt;Para criar uma nova página para o blog, basta o comando &lt;code&gt;nikola new_post -e&lt;/code&gt;. Será perguntado o título da página e o parâmetro &lt;strong&gt;-e&lt;/strong&gt; irá abrir o editor padrão para a edição da página. Você poderá editar quando desejar para complementá-la ou efetuar qualquer alteração. Ela estará disponível no subdiretório &lt;cite&gt;posts&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;É importante salientar que, o formato padrão em caso de omissão, é &lt;strong&gt;.rst&lt;/strong&gt; (reStructuredText) e não &lt;strong&gt;.md&lt;/strong&gt; (Markdown) como é padrão no GitHub. Não é nenhum problema pois no GitHub apenas as páginas &lt;strong&gt;.html&lt;/strong&gt; geradas que interessam. O &lt;strong&gt;rst&lt;/strong&gt; é um formato de marcação mais poderoso que o &lt;strong&gt;md&lt;/strong&gt; e cmais chatinho para algumas coisas. Você pode olhar a &lt;a class=&#34;reference external&#34; href=&#34;https://getnikola.com/quickstart.html&#34;&gt;introdução rápida&lt;/a&gt; para ter uma pequena ideia de como funciona. Se você acha que está velho ou está com preguiça para aprender alguma coisa nova e só editará páginas se for em Markdow, então você terá que editar o arquivo &lt;strong&gt;conf.py&lt;/strong&gt; e adicionar as duas linhas abaixo.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
POSTS = POSTS + ((&amp;quot;posts/*.md&amp;quot;, &amp;quot;posts&amp;quot;, &amp;quot;post.tmpl&amp;quot;),)
PAGES = PAGES + ((&amp;quot;stories/*.md&amp;quot;, &amp;quot;stories&amp;quot;, &amp;quot;story.tmpl&amp;quot;),)
&lt;/pre&gt;
&lt;p class=&#34;last&#34;&gt;Agora você deverá informar ao nikola que deseja a criação de uma página no formato Markdown. O comando será &lt;code&gt;nikola news_post -e -f markdown&lt;/code&gt;. Pronto.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;TESTANDO O SITE LOCALMENTE:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;A próxima etapa será criar o site estático e testar para ver se tudo está funcionando. Para criar o site basta você entrar com o comando &lt;code&gt;nikola build&lt;/code&gt;. Serão geradas as páginas html, os tag com os respectivos links, RSS (estou ficando velho; acho RSS a melhor forma de acompanhar as novidades de um determinado site).
Para testar o site no navegador, digite &lt;code&gt;nicola serve -b&lt;/code&gt;. Este é um comando para velho preguiçoso. Ele inicia e aponta o servidor para o seu site e já abre o site no navegador padrão. Nada de ficar digitando localhost:8000 ou algo parecido.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;ENTREGANDO O SEU SITE PARA O MUNDO:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;Ok. Você já criou o se repositório, clonou localmente, criou a estrutura do blog, adicionou algumas entradas interessantes. Está na hora de você mostrar para o mundo o seu trabalho. Digite &lt;code&gt;nikola github_deploy&lt;/code&gt;, responda algumas perguntas como nome e senha e pronto. Já pode avisar para seus amigos acessarem &lt;em&gt;https://usuário.github.io&lt;/em&gt; para ver o seu trabalho.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34; colspan=&#34;2&#34;&gt;CONSIDERAÇÕES FINAIS:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;p class=&#34;first&#34;&gt;Foi apresentado apenas uma pequena visão do que pode ser feito com o Nikola. Alguns tópicos que podem ser explorados:&lt;/p&gt;
&lt;ul class=&#34;last simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;Criação&lt;/strong&gt; : É possível criar blogs ou sites. Aconselho a criar um site demo &lt;cite&gt;nikola init --demo site&lt;/cite&gt; e seguir os links que possuem algums exemplos interessante de páginas como galeria ou outros formatos. Veja também os sites criados por &lt;a class=&#34;reference external&#34; href=&#34;https://users.getnikola.com/&#34;&gt;usuários&lt;/a&gt; para ter uma ideia das diversas apresentações possíveis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configuração&lt;/strong&gt; : Olhe o arquivo &lt;em&gt;conf.py&lt;/em&gt; para uma ideia do que é possível configurar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Temas&lt;/strong&gt; : Existem diversos &lt;a class=&#34;reference external&#34; href=&#34;https://themes.getnikola.com/&#34;&gt;temas&lt;/a&gt; que você pode baixar e configurar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; : Existem diversos &lt;a class=&#34;reference external&#34; href=&#34;https://plugins.getnikola.com/&#34;&gt;plugins&lt;/a&gt; para diversas finalidades. Dê uma olhada e, se achar algum interessante, clique no link para ver mais informações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nikola&lt;/strong&gt; : Digite &lt;cite&gt;nikola help&lt;/cite&gt; para uma ideia do que o Nikola pode fazer&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class=&#34;docutils&#34; /&gt;
&lt;p&gt;Ainda não configurei nem decidi por um sistema para comentário nem o fomato final do blog. Por hora era isto e obrigado se você leu até aqui.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>