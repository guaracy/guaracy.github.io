<!DOCTYPE html>
<html lang="pt_BR">
<head>
<!-- 2017-09-06 qua 14:16 -->
<meta charset="utf-8">
<title>Red-Parse Quick'n'dirty</title>
<meta name="generator" content="Org mode">
<meta name="author" content="Guaracy Monteiro">
<meta name='viewport' content='width=device-width, initial-scale=1'>
<!-- fonts -->
<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css' />
<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto'/>
<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto+Mono'/>
<!-- css -->
<!--link rel='stylesheet' href='../res/css/code.css' /-->
<link rel='stylesheet' href='../res/css/htmlize.css' />
<link rel='stylesheet' href='../res/css/main.css' /><!-- js -->
<script src='../res/js/main.js'></script>
</head>
<body>
<div id="preamble" class="status">
<!-- header.html -->
<header id="banner">
  <h1><a href="/">Cadafalso</a></h1>
  <p>Apenas mais um blog</p>
  <hr />
  <nav>
    <ul>
      <li><a href="/" title="Índice"><i class="fa fa-home"></i></a></li>
      <li><a href="/contato.html" title="Contato"><i class="fa fa-user-secret"></i></a></li>
      <li><a href="https://github.com/guaracy" title="GitHub" target="_blank"><i class="fa fa-github"></i></a></li>
      <li><a href="/index.xml" title="RSS"><i class="fa fa-rss"></i></a></li>
    </ul>
    <center>
      <form method="get" id="searchform" action="http://www.google.com/search">
        <i class="fa fa-search"></i>
        <input type="text" class="field" name="q" id="s" placeholder="Procurar...">
        <input type="hidden" name="as_sitesearch" value="https://guaracy.github.io/">
      </form>
    </center>
  </nav>
</header>
</div>
<div id="content">
<h1 class="title">Red-Parse Quick'n'dirty</h1>
<div id="outline-container-orgbe69009" class="outline-2">
<h2 id="orgbe69009"><span class="todo TODO">TODO</span> Introdução</h2>
<div class="outline-text-2" id="text-orgbe69009">
</div><div id="outline-container-org47f691b" class="outline-3">
<h3 id="org47f691b">TL;DR;</h3>
<div class="outline-text-3" id="text-org47f691b">
<div class="PREVIEW">
<p>
Parse é a resposta de <a href="https://github.com/red/red">Red</a> para <a href="https://pt.wikipedia.org/wiki/Express%C3%A3o_regular">ER</a>, mais verbosa mas totalmente integrada com a linguagem Red.
</p>

</div>
</div>
</div>

<div id="outline-container-org78ff52d" class="outline-3">
<h3 id="org78ff52d"><a id="ID-208d918c-32ad-4b8c-b336-1c580aa59cba"></a>O que é, para que serve</h3>
<div class="outline-text-3" id="text-org78ff52d">
<p>
Apenas dizer que o parse é o substituto usado por Red para ER (Expressão Regular) é omitir parte do todo. Seria como dizer que o emacs é um editor de texto. O parse é um dialeto (termo utilizado em Red para <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>) para analisar uma entrada utilizando regras de gramática. O uso comum é para a validação de informações, extração e modificação de dados e até mesmo para a criação de um dialeto (DSL).
</p>

<p>
O parse foi desenvolvido na própria linguagem (na realidade na versão de baixo nível de Red chamada de Red/System que equivaleria a linguagem C) e atualmente conta com aproximadamente 1800 <a href="https://github.com/red/red/blob/master/runtime/parse.reds">linhas de código</a>. O fato de ser desenvolvido na própria linguagem, além de mostrar uma sintaxe semelhante (diferente de uma ER) permite uma total integração com o programa e suas variáveis (variável não é o termo utilizado por Red).
</p>
</div>
</div>

<div id="outline-container-org2301e9f" class="outline-3">
<h3 id="org2301e9f"><a id="ID-86eec42d-f600-41ec-97e2-346f90bf1fd8"></a>Como funciona</h3>
<div class="outline-text-3" id="text-org2301e9f">
<p>
Dada uma determinada entrada (como Red é uma linguagem <a href="https://en.wikipedia.org/wiki/Homoiconicity">homoicônica</a>, a entrada pode ser uma string ou um bloco de dados) ela será analizada utilizando as regras informadas e como resultado poderá alterar a entrada, apenas verificar a validade da entrada, extrair dados da entrada ou executar procedimentos baseando-se na entrada e nas regras (DSL).
</p>
</div>
</div>

<div id="outline-container-orgc903ea0" class="outline-3">
<h3 id="orgc903ea0"><a id="ID-a896dccc-8db6-48c1-8fe5-307c2fea4c2e"></a><span class="todo TODO">TODO</span> Sintaxe</h3>
<div class="outline-text-3" id="text-orgc903ea0">
<div class="org-src-container">
<pre class="src src-red"><span class="org-function-name">help</span> <span class="org-function-name">parse</span>
</pre>
</div>

<pre class="example">
USAGE:
     PARSE input rules

DESCRIPTION: 
     PARSE is a native! value.

ARGUMENTS:
     input        [binary! any-block! any-string!] 
     rules        [block!] 

REFINEMENTS:
     /case        =&gt; 
     /part        =&gt; 
        length       [number! series!] 
     /trace       =&gt; 
        callback     [function! [event [word!] match? [logic!] rule [block!] input [series!] stack [block!] return: [logic!]]] 

RETURNS:
     [logic! block!]

</pre>
</div>
</div>

<div id="outline-container-org59c1bde" class="outline-3">
<h3 id="org59c1bde"><a id="ID-29c31dde-c300-4fac-8ac4-398e16904bab"></a>Exemplos</h3>
<div class="outline-text-3" id="text-org59c1bde">
<p>
Caso não entenda os exemplos, não se preocupe. Após ler todo este documento você será um expert. Caso já conheça um pouco de ER, você poderá achar que tal trecho faz tal coisa e estará certo.
</p>

<p>
<b>OBS</b>.: Como este documento está sendo produzido usando-se o Emacs com org-mode, aparecerá um quadro contendo o código fonte da linguagem seguido por um quadro com o resultado do processamento do código. O conteúdo do quadro de resultado e gerado automaticamente, não sendo necessário a execução externa mais o processo copia e cola. 
</p>
</div>

<div id="outline-container-org77e99ba" class="outline-4">
<h4 id="org77e99ba"><a id="ID-0137a4aa-a1d3-47df-bd44-908d80907a02"></a>Verificar validade</h4>
<div class="outline-text-4" id="text-org77e99ba">
<p>
Validar uma equação matemática simples
</p>
<div class="org-src-container">
<pre class="src src-red"><span id="coderef-ex-val1" class="coderef-off"><span class="linenr">1: </span><span class="org-variable-name">digit:</span>   <span class="org-function-name">charset</span> <span class="org-string">"0123456789"</span></span>
<span class="linenr">2: </span><span class="org-variable-name">primary:</span> <span class="org-rainbow-delimiters-depth-1">[</span>some digit | <span class="org-string">"("</span> expr <span class="org-string">")"</span><span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">3: </span><span class="org-variable-name">factor:</span>  <span class="org-rainbow-delimiters-depth-1">[</span>primary <span class="org-string">"**"</span> factor | primary<span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">4: </span><span class="org-variable-name">term:</span>    <span class="org-rainbow-delimiters-depth-1">[</span>factor <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-string">"*"</span> | <span class="org-string">"/"</span><span class="org-rainbow-delimiters-depth-2">]</span> term | factor<span class="org-rainbow-delimiters-depth-1">]</span>
<span id="coderef-ex-val2" class="coderef-off"><span class="linenr">5: </span><span class="org-variable-name">expr:</span>    <span class="org-rainbow-delimiters-depth-1">[</span>term <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-string">"+"</span> | <span class="org-string">"-"</span><span class="org-rainbow-delimiters-depth-2">]</span> expr | term<span class="org-rainbow-delimiters-depth-1">]</span></span>
<span class="linenr">6: </span>
<span id="coderef-ex-val3" class="coderef-off"><span class="linenr">7: </span><span class="org-function-name">print</span> <span class="org-function-name">parse</span> <span class="org-string">"1+2*(3-2)/4"</span> expr</span>
<span id="coderef-ex-val4" class="coderef-off"><span class="linenr">8: </span><span class="org-function-name">print</span> <span class="org-function-name">parse</span> <span class="org-string">"1-(3/)+2"</span> expr</span>
</pre>
</div>

<pre class="example">
true
false

</pre>

<ul class="org-ul">
<li>Da linha <a href="#coderef-ex-val1" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-val1');" onmouseout="CodeHighlightOff(this, 'coderef-ex-val1');">1</a> até a linha <a href="#coderef-ex-val2" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-val2');" onmouseout="CodeHighlightOff(this, 'coderef-ex-val2');">5</a> foram definidas as regras em um formato meio <a href="https://pt.wikipedia.org/wiki/Formalismo_de_Backus-Naur">BNF</a>.</li>
<li>A linha <a href="#coderef-ex-val3" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-val3');" onmouseout="CodeHighlightOff(this, 'coderef-ex-val3');">7</a> verifica a validade da expressão e retorna <code>true</code> pois ela está corretamente formatada conforme as regras e é válida.</li>
<li>A linha <a href="#coderef-ex-val4" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-val4');" onmouseout="CodeHighlightOff(this, 'coderef-ex-val4');">8</a>, o retorno é <code>false</code> pois foi informada uma expressão inválida que no caso é <code>(3/)</code> e falta um fator após a divisão.</li>
</ul>
</div>
</div>

<div id="outline-container-org91d0214" class="outline-4">
<h4 id="org91d0214"><a id="ID-3e3ec414-2697-45b6-894b-e2bb184d262d"></a>Extrair dados</h4>
<div class="outline-text-4" id="text-org91d0214">
<p>
Vamos ver quais os endereços de ip (ipv4) de um determinado domínio. 
</p>

<div class="org-src-container">
<pre class="src src-red"><span id="coderef-ex-ip1" class="coderef-off"><span class="linenr"> 1: </span><span class="org-variable-name">four:</span>     <span class="org-function-name">charset</span> <span class="org-string">"01234"</span></span>
<span class="linenr"> 2: </span><span class="org-variable-name">half:</span>     <span class="org-function-name">charset</span> <span class="org-string">"012345"</span>
<span class="linenr"> 3: </span><span class="org-variable-name">non-zero:</span> <span class="org-function-name">charset</span> <span class="org-string">"123456789"</span>
<span class="linenr"> 4: </span><span class="org-variable-name">digit:</span>    <span class="org-function-name">union</span> non-zero <span class="org-function-name">charset</span> <span class="org-string">"0"</span>
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span class="org-variable-name">byte:</span> <span class="org-rainbow-delimiters-depth-1">[</span>
<span class="linenr"> 7: </span>    <span class="org-string">"25"</span> half
<span class="linenr"> 8: </span>    | <span class="org-string">"2"</span> four digit
<span class="linenr"> 9: </span>    | <span class="org-string">"1"</span> digit digit
<span class="linenr">10: </span>    | non-zero digit
<span class="linenr">11: </span>    | digit
<span class="linenr">12: </span><span class="org-rainbow-delimiters-depth-1">]</span>
<span id="coderef-ex-ip2" class="coderef-off"><span class="linenr">13: </span><span class="org-variable-name">ipv4:</span> <span class="org-rainbow-delimiters-depth-1">[</span>byte <span class="org-function-name">dot</span> byte <span class="org-function-name">dot</span> byte <span class="org-function-name">dot</span> byte<span class="org-rainbow-delimiters-depth-1">]</span></span>
<span class="linenr">14: </span>
<span id="coderef-ex-ip3" class="coderef-off"><span class="linenr">15: </span><span class="org-variable-name">dominio:</span> <span class="org-variable-name">https:</span>//who.<span class="org-function-name">is</span>/whois/google.com</span>
<span class="linenr">16: </span>
<span id="coderef-ex-ip4" class="coderef-off"><span class="linenr">17: </span><span class="org-variable-name">data:</span> <span class="org-function-name">read</span> dominio</span>
<span class="linenr">18: </span>
<span id="coderef-ex-ip5" class="coderef-off"><span class="linenr">19: </span><span class="org-variable-name">ipes:</span> <span class="org-function-name">unique</span> <span class="org-function-name">parse</span> data <span class="org-rainbow-delimiters-depth-1">[</span><span class="org-function-name">collect</span> some <span class="org-rainbow-delimiters-depth-2">[</span>keep ipv4 | <span class="org-function-name">skip</span><span class="org-rainbow-delimiters-depth-2">]</span><span class="org-rainbow-delimiters-depth-1">]</span></span>
<span class="linenr">20: </span>
<span id="coderef-ex-ip6" class="coderef-off"><span class="linenr">21: </span><span class="org-function-name">foreach</span> ip ipes <span class="org-rainbow-delimiters-depth-1">[</span></span>
<span class="linenr">22: </span>    <span class="org-function-name">print</span> ip
<span class="linenr">23: </span><span class="org-rainbow-delimiters-depth-1">]</span>
</pre>
</div>

<pre class="example">
216.239.32.10
216.239.34.10
216.239.36.10
216.239.38.10

</pre>

<ul class="org-ul">
<li>Da linha <a href="#coderef-ex-ip1" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip1');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip1');">1</a> até a linha <a href="#coderef-ex-ip2" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip2');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip2');">13</a> definimos as regras para casar com o formato <a href="https://en.wikipedia.org/wiki/IPv4">ipv4</a></li>
<li>Na linha <a href="#coderef-ex-ip3" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip3');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip3');">15</a> definimos o domínio a ser pesquisado.</li>
<li>A linha <a href="#coderef-ex-ip4" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip4');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip4');">17</a> irá ler o resultado das informações retornadas pelo site no formato html.</li>
<li>Na linha <a href="#coderef-ex-ip5" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip5');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip5');">19</a> iremos analizar o conteúdo da página coletando todas as informações que casem com a nossa definição de ipv4. Como no conteúdo da página teremos texto como <code class="src src-html">&lt;<span class="org-function-name">a</span> <span class="org-variable-name">href</span>=<span class="org-string">"/whois-ip/ip-address/216.239.38.10"</span>&gt;216.239.38.10&lt;/<span class="org-function-name">a</span>&gt;</code> que retornará dois IPs <code>216.239.38.10</code> iguais, usamos <code class="src src-red"><span class="org-function-name">unique</span></code> para eliminar as informações duplicadas.</li>
<li>Finalmente, na linha <a href="#coderef-ex-ip6" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-ip6');" onmouseout="CodeHighlightOff(this, 'coderef-ex-ip6');">21</a>, iremos mostrar todos os IPs coletados e refenciados po <code>ipes</code>.</li>
</ul>
</div>
</div>

<div id="outline-container-orgbf9e4ed" class="outline-4">
<h4 id="orgbf9e4ed"><a id="ID-23bb59a2-68ab-4013-bb9e-df45db4e2b19"></a>Alterar entrada</h4>
<div class="outline-text-4" id="text-orgbf9e4ed">
</div>
</div>

<div id="outline-container-org5d89141" class="outline-4">
<h4 id="org5d89141"><a id="ID-7504c29a-210f-42b5-bc13-eec97d90a403"></a>Dialetos (DSL)</h4>
<div class="outline-text-4" id="text-org5d89141">
<p>
Bem, Red ainda está em desenvolvimento (neste documento está sendo usada a versão: <b>Red for Linux version 0.6.3</b>. Para a versão 2, o autor promete meta-DSL para facilitar e permitir a criação de DSLs mais complexas. Outro recurso que pode ser utilizado são as <a href="http://www.red-lang.org/search/label/macros">#macros</a> mas foge do escopo deste documento. Vejamos o exemplo de um interpretador para <a href="https://pt.wikipedia.org/wiki/Brainfuck">Brainfuck</a>
</p>

<div class="org-src-container">
<pre class="src src-red"><span id="coderef-ex-dsl1" class="coderef-off"><span class="linenr"> 1: </span><span class="org-variable-name">bf:</span> <span class="org-function-name">function</span> <span class="org-rainbow-delimiters-depth-1">[</span>prog <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-type">string!</span><span class="org-rainbow-delimiters-depth-2">]</span><span class="org-rainbow-delimiters-depth-1">][</span></span>
<span class="linenr"> 2: </span>    <span class="org-variable-name">size:</span> <span class="org-constant">30000</span>
<span class="linenr"> 3: </span>    <span class="org-variable-name">cells:</span> <span class="org-function-name">make</span> <span class="org-type">string!</span> size
<span class="linenr"> 4: </span>    <span class="org-function-name">append</span>/dup cells <span class="org-function-name">null</span> size
<span class="linenr"> 5: </span>
<span id="coderef-ex-dsl2" class="coderef-off"><span class="linenr"> 6: </span>    <span class="org-function-name">parse</span> prog <span class="org-rainbow-delimiters-depth-2">[</span></span>
<span class="linenr"> 7: </span>        some <span class="org-rainbow-delimiters-depth-1">[</span>
<span class="linenr"> 8: </span>              <span class="org-string">"&gt;"</span> <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-variable-name">cells:</span> <span class="org-function-name">next</span> cells<span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr"> 9: </span>            | <span class="org-string">"&lt;"</span> <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-variable-name">cells:</span> <span class="org-function-name">back</span> cells<span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">10: </span>            | <span class="org-string">"+"</span> <span class="org-rainbow-delimiters-depth-2">(</span>cells/<span class="org-constant">1</span>: cells/<span class="org-constant">1</span> + <span class="org-constant">1</span><span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">11: </span>            | <span class="org-string">"-"</span> <span class="org-rainbow-delimiters-depth-2">(</span>cells/<span class="org-constant">1</span>: cells/<span class="org-constant">1</span> <span class="org-function-name">-</span> <span class="org-constant">1</span><span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">12: </span>            | <span class="org-string">"."</span> <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-function-name">prin</span> cells/<span class="org-constant">1</span><span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">13: </span>            | <span class="org-string">","</span> <span class="org-rainbow-delimiters-depth-2">(</span>cells/<span class="org-constant">1</span>: <span class="org-function-name">first</span> <span class="org-function-name">input</span> <span class="org-string">""</span><span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">14: </span>            | <span class="org-string">"["</span> <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-function-name">if</span> <span class="org-rainbow-delimiters-depth-1">(</span>cells/<span class="org-constant">1</span> = <span class="org-function-name">null</span><span class="org-rainbow-delimiters-depth-1">)</span> thru <span class="org-string">"]"</span> | <span class="org-function-name">none</span><span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr">15: </span>            | <span class="org-string">"]"</span> <span class="org-rainbow-delimiters-depth-2">[</span>
<span class="linenr">16: </span>               <span class="org-variable-name">pos:</span> <span class="org-function-name">if</span> <span class="org-rainbow-delimiters-depth-1">(</span>cells/<span class="org-constant">1</span> &lt;&gt; <span class="org-function-name">null</span><span class="org-rainbow-delimiters-depth-1">)</span>
<span class="linenr">17: </span>               <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-variable-name">pos:</span> <span class="org-function-name">find</span>/<span class="org-function-name">reverse</span> pos #<span class="org-string">"["</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-variable-name">:pos</span>
<span class="linenr">18: </span>               | <span class="org-function-name">none</span>
<span class="linenr">19: </span>              <span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr">20: </span>            | <span class="org-function-name">skip</span>
<span class="linenr">21: </span>        <span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">22: </span>    <span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr">23: </span><span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">24: </span>
<span id="coderef-ex-dsl3" class="coderef-off"><span class="linenr">25: </span>bf <span class="org-string">{</span></span>
<span class="linenr">26: </span><span class="org-string">    ++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.</span>
<span class="linenr">27: </span><span class="org-string">    &gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.}</span>
</pre>
</div>

<pre class="example">
Hello World!

</pre>

<ul class="org-ul">
<li>Na linha <a href="#coderef-ex-dsl1" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-dsl1');" onmouseout="CodeHighlightOff(this, 'coderef-ex-dsl1');">1</a> definimos uma função já que teremos que utilizar outros valores para a interpretação. Receberá uma string como entrada.</li>
<li>Na linha <a href="#coderef-ex-dsl2" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-dsl2');" onmouseout="CodeHighlightOff(this, 'coderef-ex-dsl2');">6</a> iniciamos a análise da entrada e realizamos diversas procedimentos dependendo do conteúdo da entrada. Note que existe uma interação da analise diretamente com valores do programa em Red como incrementar ou decrementar o conteúdo de uma determinada célula, avançar, retroceder, imprimir, etc..</li>
<li>A linha <a href="#coderef-ex-dsl3" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ex-dsl3');" onmouseout="CodeHighlightOff(this, 'coderef-ex-dsl3');">25</a> é a execução do programa em BF. Chamamos a função <code>bf</code> com a string que será executada (note que em Red, <b>{</b> e <b>}</b> são os delimitadores para uma string com multiplas linhas).</li>
</ul>


<p>
Com a facilidade de criar dialetos com a linguagem, a forma de resolver problemas pode ser repensada visando um melhor resultado final. Podemos esconder uma lógica complexa em um dialeto. Um exemplo simples e mais palpável que o anterior, poderia ser algo como comprar ou vender produtos por um determinado preço mostrando cada operação e o total após as transações. Poderia ser:
</p>

<div class="org-src-container">
<pre class="src src-red"><span class="linenr"> 1: </span><span class="org-variable-name">regra-compra-e-venda:</span> <span class="org-rainbow-delimiters-depth-1">[</span>
<span class="linenr"> 2: </span>    <span class="org-function-name">set</span> a&#231;&#227;o <span class="org-rainbow-delimiters-depth-2">[</span>'comprar | 'vender<span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr"> 3: </span>    <span class="org-function-name">set</span> quantidade <span class="org-type">integer!</span>
<span class="linenr"> 4: </span>    'por 
<span class="linenr"> 5: </span>    <span class="org-function-name">set</span> pre&#231;o <span class="org-type">float!</span>
<span class="linenr"> 6: </span>    <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-function-name">either</span> a&#231;&#227;o = 'vender <span class="org-rainbow-delimiters-depth-1">[</span>
<span class="linenr"> 7: </span>            <span class="org-function-name">print</span> <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-string">"receita"</span> pre&#231;o * quantidade<span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr"> 8: </span>            <span class="org-variable-name">total:</span> total + <span class="org-rainbow-delimiters-depth-2">(</span>pre&#231;o * quantidade<span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr"> 9: </span>        <span class="org-rainbow-delimiters-depth-1">][</span>
<span class="linenr">10: </span>            <span class="org-function-name">print</span> <span class="org-rainbow-delimiters-depth-2">[</span><span class="org-string">"custo"</span> pre&#231;o * quantidade<span class="org-rainbow-delimiters-depth-2">]</span>
<span class="linenr">11: </span>            <span class="org-variable-name">total:</span> total <span class="org-function-name">-</span> <span class="org-rainbow-delimiters-depth-2">(</span>pre&#231;o * quantidade<span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">12: </span>        <span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">13: </span>    <span class="org-rainbow-delimiters-depth-2">)</span>
<span class="linenr">14: </span><span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">15: </span>
<span class="linenr">16: </span><span class="org-variable-name">total:</span> <span class="org-constant">0</span>
<span class="linenr">17: </span>
<span class="linenr">18: </span><span class="org-function-name">print</span> <span class="org-string">"Primeira transa&#231;&#227;o"</span>
<span class="linenr">19: </span><span class="org-function-name">parse</span> <span class="org-rainbow-delimiters-depth-1">[</span>vender <span class="org-constant">10</span> por <span class="org-constant">20.0</span><span class="org-rainbow-delimiters-depth-1">]</span> regra-compra-e-venda
<span class="linenr">20: </span><span class="org-function-name">print</span> <span class="org-rainbow-delimiters-depth-1">[</span><span class="org-string">"Total:"</span> total <span class="org-function-name">lf</span><span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">21: </span>
<span class="linenr">22: </span><span class="org-function-name">print</span> <span class="org-string">"Segunda transa&#231;&#227;o"</span>
<span class="linenr">23: </span><span class="org-function-name">parse</span> <span class="org-rainbow-delimiters-depth-1">[</span>
<span class="linenr">24: </span>    comprar <span class="org-constant">12</span> por <span class="org-constant">7.5</span>
<span class="linenr">25: </span>    vender  <span class="org-constant">10</span> por <span class="org-constant">20.0</span>
<span class="linenr">26: </span>    comprar  <span class="org-constant">5</span> por <span class="org-constant">15.0</span>
<span class="linenr">27: </span>    comprar  <span class="org-constant">8</span> por <span class="org-constant">12.5</span>
<span class="linenr">28: </span>    vender   <span class="org-constant">9</span> por <span class="org-constant">21.5</span>
<span class="linenr">29: </span>    <span class="org-rainbow-delimiters-depth-1">]</span> <span class="org-rainbow-delimiters-depth-1">[</span>some regra-compra-e-venda<span class="org-rainbow-delimiters-depth-1">]</span>
<span class="linenr">30: </span><span class="org-function-name">print</span> <span class="org-rainbow-delimiters-depth-1">[</span><span class="org-string">"Total:"</span> total<span class="org-rainbow-delimiters-depth-1">]</span>
</pre>
</div>

<pre class="example">
Primeira transação
receita 200.0
Total: 200.0 

Segunda transação
custo 90.0
receita 200.0
custo 75.0
custo 100.0
receita 193.5
Total: 328.5
</pre>

<p>
O exemplo foi simples mas já é possível ter uma ideia. O limite fica por conta da sua imaginação e conhecimento. 
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-org7ac1c23" class="outline-2">
<h2 id="org7ac1c23"><a id="ID-8b43f3a9-f827-4ece-9b8b-6645b8731378"></a>O Parse</h2>
<div class="outline-text-2" id="text-org7ac1c23">
<p>
Os princípios centrais do <b>parse</b> são:
</p>

<ul class="org-ul">
<li>Avança o ponteiro da série de entrada, combinando as regras de gramática até a falha da regra de nível superior (retornando <code>false</code>) ou exaustão de entrada (retornando <code>true</code>)<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.</li>
<li>Opções ordenadas (por exemplo, na regra <code>["a" | "ab"]</code>, a segunda nunca terá sucesso).</li>
<li>Composição das regras (ilimitado)</li>
<li>Retrocesso limitado: apenas as posições de entrada e de regras são retrocedidas, outras alterações permanecem.</li>
</ul>
</div>
</div>
<div id='footnotes'><!--Notas de Rodap&eacute;-->
<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Se a palavra-chave <code>collect</code> é usada em qualquer regra em sua forma mais simples, um bloco será retornado pelo <code>parse</code> não importa 
se a regra raiz teve êxito ou não.
</p></div></div>

</div></div>
<div id="postamble" class="status">
<!-- facebook comments -->
  <div><h1 class="author-name text-primary">Comentários</h1></div>
  <div id="fb-root"></div>
  <script>
    document.getElementById('fb-thishref').data-href = window.location.href;
    window.fbAsyncInit = function() {
    
    FB.init({
    appId      : 'guaracy',
    status     : true,
    xfbml      : true
    });
    };
    
    (function(d, s, id){
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) {return;}
    js = d.createElement(s); js.id = id;
    js.src = "https://connect.facebook.net/en_US/all.js";
    fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  </script><div id="fb-thishref" class="fb-comments" data-href="https://guaracy.github.io/" data-width="470"></div>


</section></article><div id="fb-root"></div>
<script>
  
  $('.fb-comments-count').each(function(i, obj) {
  var url = obj.attributes['data-url'].value;
  
  
  obj.innerHTML = '<fb:comments-count href="' + url + '"></fb:comments-count> comments';
  });

  window.fbAsyncInit = function() {
  
  FB.init({
  appId      : 'guaracy',
  status     : true,
  xfbml      : true
  });

  };

  
  (function(d, s, id){
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id;
  js.src = "https://connect.facebook.net/en_US/all.js";
  fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));
</script>
</div>
<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>
<hr /><p><center>Guaracy Monteiro<br /><a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.1 (<a href="http://orgmode.org">Org</a> mode 9.0.10)<br />
Licença: <a href= \"https://creativecommons.org/licenses/by-sa/4.0/deed.pt_BR\">CC BY-SA 4.0</a></center></p>

<!-- google analytics -->
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-92986383-1', 'auto');
    ga('send', 'pageview');
  </script>
</div>
</body>
</html>
