<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parser on Cadafalso</title>
    <link>https://guaracy.github.io/tags/parser/index.xml</link>
    <description>Recent content in Parser on Cadafalso</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <atom:link href="https://guaracy.github.io/tags/parser/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parser - extraindo dados de páginas</title>
      <link>https://guaracy.github.io/2017/02/23/parser-extraindo-dados-de-paginas/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/2017/02/23/parser-extraindo-dados-de-paginas/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;O &lt;code&gt;parser&lt;/code&gt; é a versão de &lt;strong&gt;Rebol&lt;/strong&gt; (consequentemente de &lt;a class=&#34;reference external&#34; href=&#34;http://www.red-lang.org/&#34;&gt;Red&lt;/a&gt;) para as &lt;a class=&#34;reference external&#34; href=&#34;https://pt.wikipedia.org/wiki/Express%C3%A3o_regular&#34;&gt;expressões regulares&lt;/a&gt; (RE). A maior diferença é que o parser de Red é perfeitamente integrado a linguagem, possuindo uma maior verbosidade mas sendo menos criptográfico (YMMV). Não posso deixar de mencionar o &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/Icon_(programming_language)#String_scanning&#34;&gt;string scanning&lt;/a&gt; de Icon já que foi a segunda forma que conheci. Infelizmente o pessoal de Icon resolveu fazer uma nova versão em Go (outra linguagem baseada em Icon) e deixaram de fora esta parte que era uma das mais interessantes da linguagem e passaram a utilizar RE).&lt;/p&gt;
&lt;p&gt;O parser de Red nada mais é do que uma DSL &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/red/red/blob/master/runtime/parse.reds&#34;&gt;escrita&lt;/a&gt; na própria linguagem.&lt;/p&gt;
&lt;p&gt;Basicamente é um ponteiro que percorre um determinado texto seguindo determinadas regras e geralmente utilizado para:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;seleção e extração de textos;&lt;/li&gt;
&lt;li&gt;validação de textos;&lt;/li&gt;
&lt;li&gt;alteração de textos.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class=&#34;section&#34; id=&#34;introducao&#34;&gt;
&lt;h1&gt;Introdução&lt;/h1&gt;
&lt;p&gt;A estrutura do &lt;cite&gt;parser&lt;/cite&gt; é &lt;code&gt;parser entrada regras&lt;/code&gt; onde &lt;strong&gt;regras&lt;/strong&gt; é um bloco contendo as regras que serão aplicadas na entrada. Antes de nos aventurarmos em alguns exemplos, é necessário conhecer algumas diretivas que podem ser utilizadas nas regras.&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;to &amp;lt;val&amp;gt;&lt;/strong&gt; : Procura por &amp;lt;val&amp;gt; e posiciona o ponteiro no início da ocorrência ou no final da entrada, se não encontrar. &lt;cite&gt;end&lt;/cite&gt; indica para posicionar no final do arquivo.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111-AAA&amp;quot; [to &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;-AAA&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;2. &lt;strong&gt;thru &amp;lt;val&amp;gt;&lt;/strong&gt; : Procura por &amp;lt;val&amp;gt; e posiciona o ponteiro após a ocorrência&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111-AAA&amp;quot; [thru &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;AAA&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;3. &lt;strong&gt;collect&lt;/strong&gt; e &lt;strong&gt;keep&lt;/strong&gt; : O &lt;cite&gt;collect&lt;/cite&gt; indica que deverão ser coletados em um bloco os dados posteriores que forem precedidos por &lt;cite&gt;keep&lt;/cite&gt; como pode ser visto nos exemplos acima (note que no exemplo abaixo não estamos trabalhando com texto e sim com um bloco em Red; é a vantagem da integração do &lt;cite&gt;parse&lt;/cite&gt;).&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; collect [1 2 keep 3 keep 4 5 keep 6]
== [3 4 6]
&lt;/pre&gt;
&lt;p&gt;4. &lt;strong&gt;any&lt;/strong&gt;, &lt;strong&gt;some&lt;/strong&gt; e &lt;strong&gt;inteiro&lt;/strong&gt; : O &lt;cite&gt;any&lt;/cite&gt; repete a regra zero ou mais vezes, o &lt;cite&gt;some&lt;/cite&gt; uma ou mais vezes e o &lt;cite&gt;inteiro&lt;/cite&gt; repete a regra um número especificado de vezes.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;AA-BBCDEF&amp;quot; [2 &amp;quot;A&amp;quot; some &amp;quot;-&amp;quot; collect keep to end]
== [&amp;quot;BBCDEF&amp;quot;]
red&amp;gt;&amp;gt; parse &amp;quot;AA-BBCDEF&amp;quot; [any &amp;quot;x&amp;quot; collect keep to end]
== [&amp;quot;AA-BBCDEF&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;5. &lt;strong&gt;[n] skip&lt;/strong&gt; : Avança o ponteiro uma ou mais posições&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;111++222&amp;quot; [to &amp;quot;+&amp;quot; collect keep to end]
== [&amp;quot;++222&amp;quot;]
red&amp;gt;&amp;gt; parse &amp;quot;111++222&amp;quot; [to &amp;quot;+&amp;quot; 2 skip collect keep to end]
== [&amp;quot;222&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;6. &lt;strong&gt;copy&lt;/strong&gt; &amp;lt;var&amp;gt; : Copia o valor que casar para a variável especificada. Diferente de ERs, não existem variáveis predefinidas como $1, $2, etc..&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
red&amp;gt;&amp;gt; parse &amp;quot;122.444.666&amp;quot; [thru &amp;quot;.&amp;quot; copy v to &amp;quot;.&amp;quot; (print [&amp;quot;2º :&amp;quot; v])]
2º : 444
&lt;/pre&gt;
&lt;p&gt;Bem, existem diversas outras diretivas e combinações, mas já é possível brincar com o que foi apresentado aqui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;exemplo-do-aurelio&#34;&gt;
&lt;h1&gt;Exemplo do Aurélio&lt;/h1&gt;
&lt;p&gt;O &lt;a class=&#34;reference external&#34; href=&#34;http://aurelio.net&#34;&gt;Aurélio&lt;/a&gt;, se não é o cara que mais entende de ER, é o que melhor sabe explicar este assunto complexo. Vou pegar a vídeo-aula que ele fez de &lt;a class=&#34;reference external&#34; href=&#34;http://aurelio.net/blog/2011/05/05/como-extrair-e-formatar-texto-usando-expressoes-regulares/&#34;&gt;Como extrair e formatar texto usando Expressões Regulares&lt;/a&gt; e adaptá-la para o Red e o parse. Na primeira parte, iremos copiar a página para analisar. Na segunda iremos ler diretamente da página html.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;primeira-parte&#34;&gt;
&lt;h2&gt;Primeira parte&lt;/h2&gt;
&lt;p&gt;Para esta parte, como no vídeo acima, iremos copiar (da linha &lt;em&gt;quot&lt;/em&gt; até a linha &lt;em&gt;diams&lt;/em&gt; e pode ser todas as colunas) os dados &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML&#34;&gt;desta&lt;/a&gt; tabela da wikipedia e gravar em uma arquivo &lt;tt class=&#34;docutils literal&#34;&gt;page.txt&lt;/tt&gt; no mesmo diretório onde irá rodar o nosso programa em Red.
O arquivo .txt terá o seguinte conteúdo:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
quot  &amp;quot;      U+0022 (34)     HTML 2.0        HTMLspecial     ISOnum  quotation mark (APL quote)
amp   &amp;amp;      U+0026 (38)     HTML 2.0        HTMLspecial     ISOnum  ampersand
apos  &#39;      U+0027 (39)     XHTML 1.0       HTMLspecial     ISOnum  apostrophe (apostrophe-quote); see below
lt    &amp;lt;      U+003C (60)     HTML 2.0        HTMLspecial     ISOnum  less-than sign
.....
diams ♦      U+2666 (9830)   HTML 4.0        HTMLsymbol      ISOpub  black diamond suit[f]
&lt;/pre&gt;
&lt;p&gt;O script para processar o bloco de texto e pegar apenas quatro valores das três primeiras colunas (nome, caractere, valor hexadecimal e valor decimal) fica como abaixo:&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;ln&#34;&gt; 1 &lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3 &lt;/span&gt; &lt;span class=&#34;generic subheading&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;name decorator&#34;&gt;%page.txt&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5 &lt;/span&gt; &lt;span class=&#34;generic subheading&#34;&gt;rule:&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6 &lt;/span&gt;    &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;nome&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;caractere&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10 &lt;/span&gt;      &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;hexadecimal&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;sp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;decimal&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12 &lt;/span&gt;      &lt;span class=&#34;generic strong&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;nome&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;caractere&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;hexadecimal&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;decimal&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;newline&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14 &lt;/span&gt;    &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15 &lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17 &lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;rule&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Após a execução, teremos uma saída assim (eliminamos as colunas indesejadas e separamos os valores decimal e hexadecimal referente ao caractere):&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
quot    &amp;quot;       22      34
amp     &amp;amp;       26      38
apos    &#39;       27      39
lt      &amp;lt;       3C      60
...
diams   ♦       2666    9830
&lt;/pre&gt;
&lt;p&gt;Vejamos o que faz cada linha do script.&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;Red []&lt;/strong&gt; é o cabeçalho necessário para que scripts possam ser executados. No interior do bloco [] podemos ter diversas informações e diretivas.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;3&#34;&gt;
&lt;li&gt;Lê o conteúdo do arquivo &lt;tt class=&#34;docutils literal&#34;&gt;page.txt&lt;/tt&gt; e o coloca na variável &lt;tt class=&#34;docutils literal&#34;&gt;page&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;5&#34;&gt;
&lt;li&gt;Inicializa o bloco de regras com o nome de &lt;tt class=&#34;docutils literal&#34;&gt;rule&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Diz para executar o próximo bloco 0 ou mais vezes.&lt;/li&gt;
&lt;li&gt;Copia para a variável &lt;tt class=&#34;docutils literal&#34;&gt;nome&lt;/tt&gt; o conteúdo da entrada até encontrar um &lt;tt class=&#34;docutils literal&#34;&gt;tab&lt;/tt&gt; (tabulação) e avança o ponteiro.&lt;/li&gt;
&lt;li&gt;O mesmo da linha 7 para a variável caractere. Eu poderia colocar nomes mais curtos nas variáveis como v1, v2, etc. mas preferi legibilidade (nem sei se poderia chegar a concisão de uma ER).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o &amp;quot;+&amp;quot; e incrementa o ponteiro enquanto achar algum &amp;quot;0&amp;quot; (zero)&lt;/li&gt;
&lt;li&gt;Copia o conteúdo para a variável hexadecimal até encontrar um espeço (sp).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o &amp;quot;(&amp;quot; e copia para a variável decimal o conteúdo até o &amp;quot;)&amp;quot;&lt;/li&gt;
&lt;li&gt;Imprime uma linha com o conteúdo das variáveis separados por uma tabulação. Aqui também mostra a integração do parse com a linguagem permitindo que as variáveis sejam processadas da forma que o usuário desejar (poderia até converter para klingon).&lt;/li&gt;
&lt;li&gt;Posiciona o ponteiro após o final da linha.&lt;/li&gt;
&lt;li&gt;Fecha o &lt;tt class=&#34;docutils literal&#34;&gt;any&lt;/tt&gt; aberto na linha 6 e, se ainda tiver algum conteúdo na entrada, o processamento será repetido.&lt;/li&gt;
&lt;li&gt;Fecha o bloco da regra aberto na linha 5.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class=&#34;arabic simple&#34; start=&#34;17&#34;&gt;
&lt;li&gt;Aplica a regra da linha 5 no texto lido na linha 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Parece complicado mas é bem simples. Algumas vezes parece complicado e realmente é mais complicado do que parece.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;segunda-parte&#34;&gt;
&lt;h2&gt;Segunda parte&lt;/h2&gt;
&lt;p&gt;O processo anterior pode ser válido em diversos casos. Existem outros como, por exemplo, os valores sofrem alteração no decorrer de um período ou são diversas páginas e fica impraticável copiar e colar cada vez. No próximo artigo veremos um exemplo real e mais complexo. Por enquanto ficaremos com o mesmo para facilitar mas com uma abordagem um pouco diferente.&lt;/p&gt;
&lt;p&gt;Iremos ler o conteúdo da página .html, aplicaremos as regras e coletaremos todas as informações para ser trabalhada posteriormente. Para você criar uma regra para extrair dados de um determinado texto ou outro documento, é necessário que você analise antes para poder aplicar os padrões.&lt;/p&gt;
&lt;p&gt;Analisando a página da wikipedia, podemos ver que a tabela que queremos é a terceira (existem outra formas de encontrar a tabela). Como pode ser visto no trecho abaixo, após a tag &lt;cite&gt;&amp;lt;table&amp;gt;&lt;/cite&gt; temos uma &lt;cite&gt;&amp;lt;th&amp;gt;&lt;/cite&gt; que é o cabeçalho e, após, diversas tags &lt;cite&gt;&amp;lt;tr&amp;gt;&lt;/cite&gt; que iniciam as linhas com as informações que desejamos. Nossas informações estarão entre &lt;cite&gt;&amp;lt;td&amp;gt;&lt;/cite&gt; e &lt;cite&gt;&amp;lt;/td&amp;gt;&lt;/cite&gt;. No início já é possível perceber que teremos um problema que deverá ser resolvido posteriormente. Em &lt;cite&gt;amp&lt;/cite&gt; a página contém &lt;cite&gt;&amp;amp;amp;&lt;/cite&gt; já que o &amp;amp; não pode ser usado isoladamente. Poderemos ter uma função para efetuar essas conversões que não seria tão difícil ou usar um programa externo como &lt;code&gt;cat arquivo | recode html..ascii&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;wikitable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;background: #efefef;&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Character&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Unicode code point (decimal)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Standard&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;Description&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;quot&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot;&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;U+0022 (34)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;XML 1.0&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;double &lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;/wiki/Quotation_mark&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;Quotation mark&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;quotation mark&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;amp&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;name entity&#34;&gt;&amp;amp;amp;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;U+0026 (38)&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;XML 1.0&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;/wiki/Ampersand&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;Ampersand&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;ampersand&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;O nosso programa poderia ficar assim:&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;ln&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;name decorator&#34;&gt;https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;rule-html:&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6 &lt;/span&gt;   &lt;span class=&#34;literal number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;&amp;lt;table&amp;quot;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7 &lt;/span&gt;   &lt;span class=&#34;name variable&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8 &lt;/span&gt;      &lt;span class=&#34;name variable&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9 &lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/td&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; name
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/td&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; char
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; hexa
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;; decimal
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;name variable&#34;&gt;thru&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14 &lt;/span&gt;      &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15 &lt;/span&gt;   &lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16 &lt;/span&gt;   &lt;span class=&#34;name function&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17 &lt;/span&gt;&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18 &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19 &lt;/span&gt;&lt;span class=&#34;generic subheading&#34;&gt;tabela:&lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;rule-html&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;O programa nem ficou tão diferente do primeiro (o ; indica início de comentário), que analisa apenas um arquivo texto, e ainda podemos ver algumas características da linguagem. A primeira é que foi usado &lt;strong&gt;read&lt;/strong&gt; para ler um arquivo texto e uma página https. A segunda, por ser uma linguagem rica em tipos de dados, usamos apenas &amp;lt;td&amp;gt; e não &amp;quot;&amp;lt;td&amp;gt;&amp;quot; para a verificação de conteúdo. Aqui também usamos &lt;strong&gt;collect&lt;/strong&gt; pois queremos que todos os dados sejam extraídos e armazenados para futuro processamento.&lt;/p&gt;
&lt;p&gt;Inicialmente inicializamos o ponteiro na terceira ocorrência de &lt;cite&gt;&amp;lt;table&lt;/cite&gt;, usamos um &lt;cite&gt;collect&lt;/cite&gt; para que as informações sejam armazenadas em um bloco e, um segundo &lt;cite&gt;collect&lt;/cite&gt; para que cada linha tenha seu próprio bloco.  O resultado após rodar o programa é que tabela conterá algo assim:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
[[&amp;quot;quot&amp;quot; #&amp;quot;^&amp;quot;&amp;quot; &amp;quot;22&amp;quot; &amp;quot;34&amp;quot;] [&amp;quot;amp&amp;quot; &amp;quot;&amp;amp;amp;&amp;quot; &amp;quot;26&amp;quot; &amp;quot;38&amp;quot;] [&amp;quot;apos&amp;quot; #&amp;quot;&#39;&amp;quot; &amp;quot;27  ....  ]]
&lt;/pre&gt;
&lt;p&gt;É claro que eu não poderia deixar o leitor a ver navios e ficar saber como tratar os casos onde o segundo elemento não é um caractere. Como o quarto elemento de cada linha é o código do caractere, basta percorrer todas as linhas da tabela e trocar o segundo elemento pelo caractere cujo o código está no quarto elemento. Podemos aproveitar e converter o quarto elemento de string para inteiro. O loop abaixo faz isso (O Red [] é necessário para que o pygmentize colorize o código corretamente).&lt;/p&gt;
&lt;pre class=&#34;code red literal-block&#34;&gt;
&lt;span class=&#34;name variable&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;name builtin&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;tabela&lt;/span&gt; &lt;span class=&#34;generic strong&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;to-integer&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4&lt;/span&gt;
    &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/2:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;to-char&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;linha&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;/4&lt;/span&gt;
&lt;span class=&#34;generic strong&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Após ler o artigo e entender as semelhanças e diferenças entre a regra para extrair os dados do texto e da página, você está apto a encarar novos desafios.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;conclusao&#34;&gt;
&lt;h1&gt;Conclusão&lt;/h1&gt;
&lt;p&gt;Podemos ver que o parser como alternativa de Red/Rebol para expressões regulares é bastante poderoso e, se possui a desvantagem de ser mais verboso, possui a vantagem de ser mais legível (se você não souber ER, é claro). Sem desmerecer as expressões regulares, a integração do &lt;em&gt;parse&lt;/em&gt; com a linguagem deixa visualmente mais agradável, não parecendo uma prótese alienígena no seu código.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>