<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Org Mode on Cadafalso</title>
    <link>https://guaracy.github.io/tags/org-mode/index.xml</link>
    <description>Recent content in Org Mode on Cadafalso</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <atom:link href="https://guaracy.github.io/tags/org-mode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Literate Programming</title>
      <link>https://guaracy.github.io/2017/03/03/literate-programming/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/2017/03/03/literate-programming/</guid>
      <description>&lt;h1 id=&#34;introdução&#34;&gt;Introdução&lt;/h1&gt;

&lt;p&gt;Não vou traduzir &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34; title=&#34;Literate Programming&#34;&gt;Literate Programming&lt;/a&gt; (LP) pois não gosto das traduções possíveis. Prefiro algo como &lt;em&gt;documento inteligente&lt;/em&gt;. Basicamente é o desenvolvimento de documentação/explanação lógica e programa simultâneamente. O emacs junto com o org-mode facilitam muito a tarefa pois:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Você pode executar os programas ou trecho do programa e incluir o resultado automaticamente no documento. Evita que uma alteração qualquer implique em executar o programa externamente, copiar e colar o resultado no documento podendo introduzir erros.&lt;/li&gt;
&lt;li&gt;Você pode gerar automaticamente o programa ou os programas, mesmo juntando diversos fragmentos em um só ao final. Também evita a possível erros entre versões.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pessoalmente não utilizo para grandes projetos mas é interessante para pequenos projetos e, principalmente se desejamos publicá-lo.&lt;/p&gt;

&lt;p&gt;No início eu disse que não gostava da tradução mas, como ficaria a trqadução em diversas linguas de &#34;Literate Programming&#34; pelo google translator?&lt;/p&gt;

  Literate Programming

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;de&lt;/td&gt;
&lt;td&gt;Literate Programmierung&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fr&lt;/td&gt;
&lt;td&gt;Programmation alphabétique&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ar&lt;/td&gt;
&lt;td&gt;البرمجة القراءة والكتابة&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ja&lt;/td&gt;
&lt;td&gt;文学プログラミング&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pt&lt;/td&gt;
&lt;td&gt;Programação Alfabetizada&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;es&lt;/td&gt;
&lt;td&gt;Programación alfabetizada&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;O que foi interessante nas traduções acima é que eu apenas digitei &#34;Literate Programming&#34; dentro de um bloco &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; e &lt;code&gt;#+END_SRC&lt;/code&gt; indicando o programa ou rotina que interpretaria os dados, o idioma original e os idiomas destinos da tradução bem como o formato para a exportação dos dados (&lt;code&gt;translate :src en :dest de,fr,ar,ja,pt,es :exports both&lt;/code&gt;). Depois pressionei Ctrl+C Ctrl+C e as traduções foram buscadas automaticamente. Basta alterar o texto ou incluir/excluir alguma linguagem, pressionar a mesma sequência de teclas e o resultado será alterado (nem preciso excluir o resultado anterior).&lt;/p&gt;

&lt;h1 id=&#34;prática&#34;&gt;Prática&lt;/h1&gt;

&lt;p&gt;https://github.com/carteiro/ceps&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>De nikola para Hugo</title>
      <link>https://guaracy.github.io/2017/03/02/de-nikola-para-hugo/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/2017/03/02/de-nikola-para-hugo/</guid>
      <description>&lt;h1 id=&#34;introdução&#34;&gt;Introdução&lt;/h1&gt;

&lt;p&gt;Um dos motivos para a utilização do nikola na primeira fase de construção deste site foi a possibilidade de trabalhar com arquivos no formato org-mode. É claro que as facilidades de instalação e &lt;em&gt;deploy&lt;/em&gt; influenciaram na escolha.&lt;/p&gt;

&lt;p&gt;De qualquer forma, tinham algumas coisinhas que não estavam bem integradas com o emacs. Após algums STFW, descobri que o &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://github.com/spf13/hugo/pull/3001&#34; title=&#34;recentemente&#34;&gt;recentemente&lt;/a&gt;, começou a aceitar documentos no formato org-mode. A abordagem dos dois é diferente. Enquanto o nikola usa o proprio emacs para gerar o .html e depois converter, o Hugo utiliza um módulo (escrito em Go). Olhando o site do &lt;a href=&#34;https://chaseadams.io/getting-started-with-emacs/&#34; title=&#34;Chase&#34;&gt;Chase&lt;/a&gt;, que desenvolveu o parser para os arquivos .org, e descobri que é mais um novo usuário que se encantou com o &lt;a href=&#34;http://orgmode.org/worg/org-screenshots.html&#34; title=&#34;org-mode&#34;&gt;org-mode&lt;/a&gt; e o emacs.&lt;/p&gt;

&lt;p&gt;O Hugo, pelo menos por enquanto, não é tão amigável como o Nikola para algumas tarefas mas, para outras, sou obrigado a tirar o chapéu. Existem diversas &lt;a href=&#34;http://gohugo.io/tools/&#34; title=&#34;ferramentas&#34;&gt;ferramentas&lt;/a&gt; que cobrem a migração de um blog antigo para o Hugo (não tem Nikola), o &lt;em&gt;deploy&lt;/em&gt; do site, diversos &lt;em&gt;frontends&lt;/em&gt; que dispensam um editor, &lt;em&gt;plugins&lt;/em&gt; para editores (inclusive para emacs). Mas o mais legal, pelo menos eu achei, é que basta gravar as alterações em algum post, arquivo de configuração, etc., que elas são imediatamente detectadas, os procedimentos necessários são executados e o navegador é atualizado.&lt;/p&gt;

&lt;p&gt;Se você estiver interessado, existe uma discussão no &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/5wibiv/hugo_v019_with_native_emacs_orgmode_content/&#34; title=&#34;reddit&#34;&gt;reddit&lt;/a&gt; sobre o suporte do hugo para org-mode.&lt;/p&gt;

&lt;h1 id=&#34;instalação&#34;&gt;Instalação&lt;/h1&gt;

&lt;p&gt;Primeiro é necessário instalar o &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;, é claro. Veja se a sua distribuição possui nos repositórios para a instalação ou siga os passos da página. Para utilizar o script de &lt;em&gt;deploy&lt;/em&gt; que se encontra abaixo, você deverá ter instalado o &lt;a href=&#34;https://github.com/davisp/ghp-import&#34; title=&#34;ghp-import&#34;&gt;ghp-import&lt;/a&gt;. Como estava usando o Nikola, já tinha instalado. Pode ser que sua distro disponha para a instalação.&lt;/p&gt;

&lt;p&gt;O primeiro passo é criar um diretorio &lt;code&gt;&amp;lt;usuário&amp;gt;github.io&lt;/code&gt; no GitHub. Podemos ter os seguintes passos para criar um blog na pasta &lt;code&gt;~/myblog&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  git clone https://github.com/guaracy.github.io.git ~/myblog
  &lt;span style=&#34;color: #008000&#34;&gt;cd&lt;/span&gt; ~/myblog
  git checkout -b &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
  hugo new site myblog
  mv myblog/* .
  rm -r myblog
  git clone https://github.com/beli3ver/hemingway2.git themes/hemingway2
  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;theme = \&amp;quot;hemingway2\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
  hugo new post/primeiro.md
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Foi escolhido o tema &lt;strong&gt;hemingway2&lt;/strong&gt; mas você pode escolher outro &lt;a href=&#34;https://themes.gohugo.io/&#34; title=&#34;tema&#34;&gt;tema&lt;/a&gt; que achar melhor (trocando o nome do tema nas instruções acima). Verifique as instruções de instalação e veja os comentários na pasta do tema para saber como configurá-lo. Agora você pode digitar o comando abaixo e&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  hugo serve
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;abrir no seu navegado &lt;code&gt;localhost:1313&lt;/code&gt; . Se tudo deu certo, você verá o seu site. Você pode abrir e verificar o arquivo &lt;code&gt;config.toml&lt;/code&gt; alterado a variável &lt;code&gt;baseURL&lt;/code&gt; para https://usuário.github.io, o titulo do site e grave. Altere também o post que você criou e deve estar em &lt;code&gt;content/post/primeiro.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para criar o site, apenas digite &lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;deploy&#34;&gt;Deploy&lt;/h1&gt;

&lt;p&gt;Criei um script que funciona da mesma forma que o Nikola. Colocará no &lt;em&gt;branch&lt;/em&gt; master o conteúdo do site e no &lt;em&gt;branch&lt;/em&gt; source o conteúdo de desenvolvimento. Existem outras formas, mas vamos ficar no KISS. Se o script for chamado com um parâmetro, será assumido como mensagem para o &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#!/usr/bin/bash&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;
      &lt;span style=&#34;color: #19177C&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Rebuild on `date`&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;color: #19177C&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fi&lt;/span&gt;

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;** Atualizando site&amp;quot;&lt;/span&gt;
  hugo

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;\n\n** Enviandopara o GitHub - master&amp;quot;&lt;/span&gt;
  git add .
  git commit -am &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
  git rev-parse &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
  ghp-import -n -m &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; -p -r origin -b master public

  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;\n\n** Enviandopara o GitHub - source&amp;quot;&lt;/span&gt;
  git push -u origin &lt;span style=&#34;color: #008000&#34;&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h1&gt;

&lt;p&gt;O org-mode do hugo ainda não está 100% mas funciona. Como o autor usa emacs, org-mode e hugo, é mais fácil que mantenha atualizado e faça melhorias.&lt;/p&gt;

&lt;p&gt;Sobre os temas, parece que o site mostra do atualizado mais recente para o menos. Fica por sua conta e risco utilizar um thema muito antigo. Pode ser que você tenha que efetuar alguma alteração para que ele funcione corretamente em versões mais novas ou futuras do hugo.&lt;/p&gt;

&lt;p&gt;Como eu tinha poucas entradas no blog feito com o nikola, foi fácil converter os cabeçalhos para se adaptar ao hugo. Se tiver muitos posts, pode ser necessário fazer um script para efetuar as alterações ou esperar que alguém desenvolva para você.]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gerenciando Blog Estático</title>
      <link>https://guaracy.github.io/2017/02/08/gerenciando-blog-estatico/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://guaracy.github.io/2017/02/08/gerenciando-blog-estatico/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;div class=&#34;section&#34; id=&#34;introducao&#34;&gt;
&lt;h1&gt;Introdução&lt;/h1&gt;
&lt;p&gt;Fora a facilidade de uso, o outro motivo importante de escolher o Nikola como gerenciador de blog estático foi a possibilidade de editar as entradas no formato &lt;a class=&#34;reference external&#34; href=&#34;http://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; diretamente, isto é, edito direto no formato org e mando o Nikola gerar o blog. Poderia converter para .rst ou .md mas as etapas intermediárias são chatas e podem resultar em erros difíceis de serem resolvidos ou localizados. Não, não é apenas mais uma linguagem de marcação. É a linguagem de marcação definitiva.&lt;/p&gt;
&lt;p&gt;Usar o emacs não é nenhum bicho de sete cabeças. Para quem usa o vim, existe o &lt;a class=&#34;reference external&#34; href=&#34;http://spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt; que foi feito pensando nesses usuários. Mesmo funcionamento do teclado (nunca usei i vim para confirmar) com o coração do emacs. Muitos profissionais de outras áreas (principalmente educação) fizeram a troca apenas para usar o org-mode. O &lt;a class=&#34;reference external&#34; href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2014/08/08/What-we-are-using-org-mode-for/&#34;&gt;John Kitchin&lt;/a&gt;, por exemplo, utiliza org-mode para escrever artigos científicos e livros, agenda profissional/pessoal, apresentações e até para lecionar indo desde a preparação do material até a avaliação dos alunos como pode ser visto neste &lt;a class=&#34;reference external&#34; href=&#34;https://www.youtube.com/watch?v=cRUCiF2MwP4&#34;&gt;vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;blog-admin&#34;&gt;
&lt;h1&gt;blog-admin&lt;/h1&gt;
&lt;p&gt;O &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/guaracy/blog-admin&#34;&gt;blog-admin&lt;/a&gt; facilita a administração de um blog criado pelo hexo, org-page e Nikola (que é o que me interessa) utilizando o emacs. A aparência é assim:&lt;/p&gt;
&lt;img alt=&#34;/images/blog-admin.png&#34; src=&#34;https://guaracy.github.io/images/blog-admin.png&#34; /&gt;
&lt;p&gt;As operações ficam a uma tecla de distância e as entradas disponíveis na tabela sendo facilmente visualizadas (data, rascunho, título). Só pela visualização já seria um facilitador e é como está sendo usado neste momento. Já fiz um fork do repositório do GitHub e pretendo efetuar as alterações necessárias para que se ajuste ao meu fluxo de trabalho e corrigir alguns probleminhas.&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; : Altera entre o modo rascunho e publicação&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; : Funcionou corretamente. Provavelmente seria utilizados apenas para apagar posts marcados como &lt;tt class=&#34;docutils literal&#34;&gt;draft&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt; : Não testei mas também não sei quando iria duplicar um post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; : Funcionou corretamente mas deveria ter a opção para outros formatos e não apenas .rst.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RET&lt;/strong&gt; : Enter e o emacs abre o post corretamente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;r&lt;/strong&gt; : Apenas escaneia o diretório para refazer a estrutura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; : Não funcionou com posts .org que necessitem de uma intervenção.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt; : Apenas abre o arquivo de configuração &lt;tt class=&#34;docutils literal&#34;&gt;conf.py&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; : Preciso verificar melhor se existe uma configuração para entregar direto no GitHub.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt; : Filtrou corretamente as entradas quando um título tinha o termo indicado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretendo criar mais uma opção. Talvez um &lt;strong&gt;L&lt;/strong&gt; para testar localmente. Iria executar &lt;cite&gt;nikola build ; nikola serve -b&lt;/cite&gt; para gerar e abrir no navegador padrão do sistema. Apesar do &lt;strong&gt;w3m&lt;/strong&gt; oferecer uma boa visualização de sites, não é uma opção.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;conclusao&#34;&gt;
&lt;h1&gt;Conclusão&lt;/h1&gt;
&lt;p&gt;Precisa de umas alterações mas já mostrou ser uma boa opção para quem trabalha com sites estáticos e emacs. Resolvi fazer um vídeo mostrando um pouco o funcionamento do blog-admin mas, talvez, com um pouco de enfase na digitação de um documento usando o org-mode. Especificamente na digitação de trechos de código em três linguagens sendo o resultado calculado e apresentado diretamente, evitando o problema de digitar o resultado incorretamente ou ter que rodar o programa externamente, copiar o resultado e colar no documento.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ehgwjtapwsytr0txgr7h6v36x.js&#34; id=&#34;asciicast-ehgwjtapwsytr0txgr7h6v36x&#34; async&gt;&lt;/script&gt;&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;atualizacoes&#34;&gt;
&lt;h1&gt;Atualizações&lt;/h1&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Adicionei a possibilidade de utilizar &lt;code&gt;nikola github_deploy&lt;/code&gt; para facilitar a entrega no GitHub.&lt;/li&gt;
&lt;li&gt;Adicionei a opção &lt;strong&gt;&amp;quot;O&amp;quot;&lt;/strong&gt; no menu para abrir o site em um navegar externo. Falta incluir a opção para o usuário escolher o navegador (está o &lt;cite&gt;firefox&lt;/cite&gt;). Necessita do &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/skeeto/emacs-web-server&#34;&gt;emacs-web-server&lt;/a&gt;. Funciona como &lt;tt class=&#34;docutils literal&#34;&gt;nikola serve &lt;span class=&#34;pre&#34;&gt;-b&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As alterações ainda não estão no GitHub mas esta postagem já foi feita com a versão loca atualizada do blog-admin. É só pressionar &amp;quot;B&amp;quot; para recriar o site, &amp;quot;O&amp;quot; para testar no firefox se está tudo ok e um &amp;quot;D&amp;quot; para enviar para o GitHub.&lt;/p&gt;
&lt;img alt=&#34;/images/ba-git.png&#34; src=&#34;https://guaracy.github.io/images/ba-git.png&#34; /&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>