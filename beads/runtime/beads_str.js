import{a_meas,a_path,a_image,a_tree,a_function,a_sound,a_gradient}from"./beads_std.js";import*as std from"./beads_std.js";const TRACE_SPLIT=!1,TRACE_CONV=!1,TRACE_JSON=!1,TRACE_FIND=!1,TRAP_U_SUBSCRIPTS=!0;export const SUBOP_REG_NOCASE=1;export const SUBOP_REG_MULTILINE=2;export const SUBOP_REG_GLOBAL=4;export const SUBOP_REG_STARTS=8;export const SUBOP_REG_ENDS=16;export const SUBOP_REG_LOG=32;export const ERROR_STRING="ERR";export const ascii_lowercase="abcdefghijklmnopqrstuvwxyz";export const ascii_uppercase="ABCDEFGHIJKLMNOPQRSTUVWXYZ";export const ascii_letters=ascii_lowercase+ascii_uppercase;export const digits="0123456789";export const hexdigits="0123456789abcdefABCDEF";export const octdigits="01234567";export const CR="\r";export const LF="\n";export const CODE_0="0".charCodeAt(0);export const CODE_9="9".charCodeAt(0);export const CODE_A="A".charCodeAt(0);export const CODE_TILDE="~".charCodeAt(0);export const CODE_SPACE=" ".charCodeAt(0);export const CODE_SLASH="/".charCodeAt(0);export const CODE_SQUOTE="'".charCodeAt(0);export const CODE_DQUOTE='"'.charCodeAt(0);export const CODE_CR="\r".charCodeAt(0);export const CODE_NL="\n".charCodeAt(0);export const CODE_TAB="\t".charCodeAt(0);export const CODE_BACKSLASH="\\".charCodeAt(0);const DELIM_CR="\r",DELIM_CRLF="\r\n",DELIM_LF="\n";let g_delimiter;export const BOM_UTF16_LE=65279;export const BOM_UTF16_BE=65534;const SS_DATE=0;export const PARSE_EOS="ï¿¿";export let parse_include_white;let gparse_pos,gparse_ss,gparse_errflag,gparse_errmsg;export const BEADS_JSON_MARKER='{"!beads":';export const R_a_find=9007194157790523;export const F_find_len=9007192689371859;export const F_find_start=9007191603303728;export const R_a_find_repl=9007192534696881;export const F_find_patt=9007193956346111;export const F_repl_patt=9007194250103617;const _M="str";export function str_hash_fnv(e){let t,r,s,n,a,o=e.length;for(t=16777619,s=0;s<o;s++)n=(t^=r=e.charCodeAt(s))>>>16,a=65535&t,t=Math.imul(t,16777619)>>>0;return t};export function safe_for_html(e){let t,r,s="";for(t=0;t<e.length;t++)"<"===(r=e.charAt(t))?r="&lt;":">"===r?r="&gt;":"&"===r?r="&amp;":'"'===r?r="&quot;":"'"===r&&(r="&apos;"),s+=r;return s};export function filepath_get_folder(e){let t=e.lastIndexOf("/"),r=e.lastIndexOf("\\"),s=t>r?t:r;return e.substr(0,s)};export function filepath_get_name(e){let t=e.lastIndexOf("/"),r=e.lastIndexOf("\\"),s=t>r?t:r;return e.substr(s+1)};function weekday_to_short_str(e,t=std.U){switch(e){case 0:return std.s(SS_DATE,"Sun",t);case 1:return std.s(SS_DATE,"Mon",t);case 2:return std.s(SS_DATE,"Tue",t);case 3:return std.s(SS_DATE,"Wed",t);case 4:return std.s(SS_DATE,"Thu",t);case 5:return std.s(SS_DATE,"Fri",t);case 6:return std.s(SS_DATE,"Sat",t);default:return std.ERR_STR}}function weekday_to_long_str(e,t=std.U){switch(e){case 0:return std.s(SS_DATE,"Sunday",t);case 1:return std.s(SS_DATE,"Monday",t);case 2:return std.s(SS_DATE,"Tuesday",t);case 3:return std.s(SS_DATE,"Wednesday",t);case 4:return std.s(SS_DATE,"Thursday",t);case 5:return std.s(SS_DATE,"Friday",t);case 6:return std.s(SS_DATE,"Saturday",t);default:return std.ERR_STR}}function month_to_short_str(e,t=std.U){switch(e){case 1:return std.s(SS_DATE,"Jan",t);case 2:return std.s(SS_DATE,"Feb",t);case 3:return std.s(SS_DATE,"Mar",t);case 4:return std.s(SS_DATE,"Apr",t);case 5:return std.s(SS_DATE,"May",t);case 6:return std.s(SS_DATE,"Jun",t);case 7:return std.s(SS_DATE,"Jul",t);case 8:return std.s(SS_DATE,"Aug",t);case 9:return std.s(SS_DATE,"Sep",t);case 10:return std.s(SS_DATE,"Oct",t);case 11:return std.s(SS_DATE,"Nov",t);case 12:return std.s(SS_DATE,"Dec",t);default:return std.ERR_STR}}function month_to_long_str(e,t=std.U){switch(e){case 1:return std.s(SS_DATE,"January",t);case 2:return std.s(SS_DATE,"February",t);case 3:return std.s(SS_DATE,"March",t);case 4:return std.s(SS_DATE,"April",t);case 5:return std.s(SS_DATE,"May",t);case 6:return std.s(SS_DATE,"June",t);case 7:return std.s(SS_DATE,"July",t);case 8:return std.s(SS_DATE,"August",t);case 9:return std.s(SS_DATE,"September",t);case 10:return std.s(SS_DATE,"October",t);case 11:return std.s(SS_DATE,"November",t);case 12:return std.s(SS_DATE,"December",t);default:return std.ERR_STR}}function adjust_to_city(e,t,r){if(r==std.TIMEZONE_GMT||r==std.TIMEZONE_UTC){let r=60*e.getTimezoneOffset()*1e3;e.setTime(t+r)}else std.argument_err("arbitrary time zones not yet implemented")}export function time_to_str(e,t){let r,s,n,a,o,_,i,c=std.U,d=std.U,l=std.U;for(let e in t)switch(e){case"time":c=t.time;break;case"lang":d=t.lang;break;case"city":l=t.city;break;default:std.argument_err("bad option: "+e)}c==std.U&&(c=std.now),c*=1e3;let u=new Date(c);for(l!=std.U&&adjust_to_city(u,c,l),a=0,_=e.length,o=0,s="",r="",a=0;a<_;a++)switch(n=e.charAt(a),o){case 0:"["!=n||0!=a&&"\\"==e.charAt(a-1)?s+=n:(r+=s,s="[",o=1);break;case 1:if("]"==n){switch(s+="]"){case"[sun]":s=weekday_to_short_str(u.getDay());break;case"[sunday]":s=weekday_to_long_str(u.getDay());break;case"[jan]":s=month_to_short_str(u.getMonth());break;case"[january]":s=month_to_long_str(u.getMonth());break;case"[day]":s=(i=u.getDate())>=1&&i<=31?to_str(i):std.ERR_STR;break;case"[day2]":s=(i=u.getDate())>=1&&i<=31?to_str(i,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[hour]":s=(i=u.getHours())>=0&&i<=23?to_str(i,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[hour12]":s=(i=u.getHours())>=0&&i<=11?to_str(i,{min:2,zero_pad:std.Y}):i>=12&&i<=23?to_str(i-12,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[julian]":s=(i=std.day_of_year(u))>=1&&i<=366?to_str(i):std.ERR_STR;break;case"[month]":s=(i=u.getMonth()+1)>=1&&i<=12?to_str(i):std.ERR_STR;break;case"[month2]":s=(i=u.getMonth()+1)>=1&&i<=12?to_str(i,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[minute]":s=(i=u.getMinutes())>=0&&i<=59?to_str(i,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[am]":s=u.getHours()<=11?std.s(SS_DATE,"AM",d):std.s(SS_DATE,"PM",d);break;case"[second]":s=(i=u.getSeconds())>=0&&i<=61?to_str(i,{min:2,zero_pad:std.Y}):std.ERR_STR;break;case"[msec]":s=(i=u.getMilliseconds())>=0&&i<=999?to_str(i,{min:3,zero_pad:std.Y}):std.ERR_STR;break;case"[week_sun]":s=to_str(std.week_of_year_sunday(u));break;case"[week_mon]":s=to_str(std.day_of_week_monday(u));break;case"[year]":s=(i=u.getFullYear())>=0&&i<=9999?to_str(i):std.ERR_STR;break;case"[year2]":s=(i=u.fullYear)>=0&&i<=9999?to_str(i%100):std.ERR_STR;break;case"[date]":s=time_to_str("[jan] [day], [year]",t);break;case"[date_time]":s=time_to_str("[jan] [day], [year] [hour12]:[minute] [am]",t);break;case"[iso_date]":s=time_to_str("[year]-[month2]-[day2]",t);break;case"[iso_time]":s=time_to_str("[hour]:[minute]:[second]",t);break;default:std.CHECKS?std.argument_err("### internal error, unknown conversion: "+s):s=std.ERR_STR}o=0,r+=s,s=""}else s+=n}return r+=s};export function parse_init(e){gparse_ss=e,gparse_pos=0,parse_include_white=!1,gparse_errflag=!1,gparse_errmsg=""};export function parse_get(){let e;for(;;){if(!(gparse_pos<gparse_ss.length)){e=PARSE_EOS;break}if(e=gparse_ss.charAt(gparse_pos),gparse_pos+=1,e>" "||parse_include_white)break}return e};export function parse_unget(){gparse_pos-=1};export function parse_peek(){let e;for(;;){if(!(gparse_pos<gparse_ss.length)){e=PARSE_EOS;break}if((e=gparse_ss.charAt(gparse_pos))>" ")break;if(gparse_pos+=1,parse_include_white)break}return e};export function parse_err(e){gparse_errflag=!0,gparse_errmsg=conv("{str} at position {int}",e,gparse_pos),TRACE_JSON&&console.log("json error "+gparse_errmsg)};export function parse_match(e){let t=e.length;if(!parse_include_white)for(;gparse_pos<gparse_ss.length&&gparse_ss.charAt(gparse_pos)<=" ";)gparse_pos+=1;return gparse_ss.substr(gparse_pos,t)===e&&(gparse_pos+=t,!0)};export function parse_hexdigit(){let e;return(e=parse_get())>="0"&&e<="9"?e.charCodeAt(0)-"0".charCodeAt(0):e>="A"&&e<="F"?10+e.charCodeAt(0)-"A".charCodeAt(0):e>="a"&&e<="f"?10+e.charCodeAt(0)-"a".charCodeAt(0):(parse_err("Bad hex digit"),0)};export function parse_expect(e){return!!parse_match(e)||(parse_err(conv("Expected '{str}' but got '{str}'",e,parse_peek())),!1)};function json_hex4(){let e,t,r=0;for(t=0;t<4&&(e=parse_hexdigit(),!gparse_errflag);t++)r=16*r+e;return to_char(r)}function json_escape(){let e;return'"'===(e=parse_get())?'"':"\\"===e?"\\":"/"===e?"/":"b"===e?"\b":"f"===e?"\f":"n"===e?"\n":"r"===e?"\r":"t"===e?"\t":"u"===e?json_hex4():(parse_err("unexpected character after backslash")," ")}function p_json_string(){let e,t="";for(parse_include_white=!0;'"'!==(e=parse_get());){if(e===PARSE_EOS){parse_err("String not terminated, unbalanced double quotes");break}if(e<" "){parse_err("Control characters not allowed inside a JSON string");break}if("\\"===e&&(e=json_escape(),gparse_errflag))break;t+=e}return parse_include_white=!1,TRACE_JSON&&console.log("json string='"+t+"'"),t}function p_json_number(e){let t,r,s=std.ERR;if(t=gparse_pos-1,parse_include_white=!0,"-"===e&&(e=parse_get()),"0"===e)e=parse_get();else{if(!(e>="1"&&e<="9"))return parse_err(conv("bad character '{str}' in number",e)),parse_include_white=!1,std.ERR;for(;(e=parse_get())>="0"&&e<="9";);}if("."===e)for(r=0;(e=parse_get())>="0"&&e<="9";)r+=1;if("e"===e||"E"===e){for("+"!==e&&"-"!==e||(e=parse_get()),r=0;(e=parse_get())>="0"&&e<="9";)r+=1;if(0===r)return parse_err("missing exponent after 'e' in number"),parse_include_white=!1,std.ERR}return parse_unget(),s=Number(gparse_ss.substring(t,gparse_pos)),TRACE_JSON&&console.log("json substr="+gparse_ss.substring(t,gparse_pos)+", number="+String(s)),parse_include_white=!1,s}function key_to_index(e){let t;return t="^"===e.charAt(0)?to_num(e.substr(1)):to_num(e),Number.isNaN(t)&&(t=str_to_enum(e)),t}function p_beads_node(e){let t,r,s,n,a,o,_=0,i=0;function do_emit(){let t,r;if(0!==_){switch(TRACE_JSON&&console.log(conv("storing value of dtype={} at path={path}",_,e)),_){case std.TYPE_NUM:std.setv(0,0,e,n);break;case std.TYPE_STR:std.setv(0,0,e,a);break;case std.TYPE_MEAS:std.setv(0,0,e,o);break;case std.TYPE_FUNC:case std.TYPE_IMAGE:break;default:std.internal_err("not yet imp")}0!==i&&((r=(t=std.path_to_pathx(e)).lev[t.lastx].node).eflags|=i),_=0}else TRACE_JSON&&console.log(conv("no value to store at path={path}",e))}for(TRACE_JSON&&console.log(conv("p_beads_node, gparse_pos={int}",gparse_pos));!gparse_errflag;){if(parse_match(PARSE_EOS))return void parse_err("Unbalanced braces, missing right braces(or too many left braces)");if(parse_match("}")){do_emit();break}if(!parse_match(",")){if(!parse_expect('"'))break;if(t=p_json_string(),gparse_errflag)break;if(!parse_expect(":"))break;switch(t){case"e":if(s=p_json_number(r=parse_get()),gparse_errflag)break;switch(s){case 1:n=std.ERR;break;case 2:n=std.INFINITY;break;case 3:n=std.NEG_INFINITY;break;default:return void parse_err("bad e: value")}_=std.TYPE_NUM;break;case"n":r=parse_get(),n=p_json_number(r),_=std.TYPE_NUM;break;case"s":if(!parse_expect('"'))break;a=p_json_string(),_=std.TYPE_STR;break;case"c":if(do_emit(),!parse_expect("{"))return;p_beads_termlist(e);break;case"g":i=s>>>0;break;case"m":var c=s.split("~");o=std.meas(n,Number(c[0]),Number(c[1])),_=std.TYPE_MEAS;break;case"i":_=std.TYPE_IMAGE,std.internal_err("not yet");break;case"f":_=std.TYPE_FUNC,std.internal_err("not yet");break;case"p":_=std.TYPE_PATH,std.internal_err("not yet");break;default:parse_err(conv("Unexpected field {str}",t))}}}}function p_beads_termlist(e){let t,r;for(;;){if(TRACE_JSON&&console.log(conv("top of beads termlist, pos={int}, ss={str}",gparse_pos,gparse_ss.substr(0,100))),parse_match(PARSE_EOS)){parse_err("Unbalanced braces, missing right braces(or too many left braces)");break}if(parse_match("}"))break;if(parse_match(","))continue;if(!parse_expect('"'))break;if(t=p_json_string(),gparse_errflag)break;if(!parse_expect(":"))break;r=key_to_index(t);let s=std.addr_append(e,r);if(!parse_expect("{"))break;if(p_beads_node(s),gparse_errflag)break}}function p_json_termlist(e){let t,r,s,n,a;for(;;){if(TRACE_JSON&&console.log(conv("top of json termlist, pos={int}, ss={str}",gparse_pos,gparse_ss.substr(0,100))),parse_match(PARSE_EOS)){parse_err("Unbalanced braces, missing right braces(or too many left braces)");break}if(parse_match("}"))break;if(parse_match(","))continue;if(!parse_expect('"'))break;if(n=p_json_string(),gparse_errflag)break;if(!parse_expect(":"))break;a=key_to_index(n);let o=std.addr_append(e,a);if('"'==(t=parse_get())){if(r=p_json_string(),gparse_errflag)break;std.setv(0,0,o,r)}else if("{"==t)p_json_termlist(o);else if("["===t)std.internal_err("array not yet imp");else{if(s=p_json_number(t),gparse_errflag)break;std.setv(0,0,o,s)}}}export function json_to_tree(e,t){let r,s;parse_init(e),parse_match(BEADS_JSON_MARKER)?1===(r=p_json_number(s=parse_get()))?p_beads_termlist(t):parse_err(conv("Version error, we don't know how to convert Beads style JSON of version {int}",r)):parse_match("{")?p_json_termlist(t):parse_match(PARSE_EOS)?TRACE_JSON&&console.log("ignoring empty JSON decode string"):parse_err("JSON must start with '{'"),TRACE_JSON&&(gparse_errflag?console.log("JSON decode error="+gparse_errmsg):console.log("JSON decode okay"))};export function tree_to_json(e,t=null){let r,s,n,a="",o=std.INFINITY;if(e instanceof std.a_tree)r=e;else if(e instanceof std.a_path){if(null===e)return null;r=std.path_to_node(e)}else std.argument_err("expected path or tree");for(let e in t)switch(e){case"limit":o=t.limit;break;default:std.argument_err("bad option: "+e)}return s=0,a=BEADS_JSON_MARKER+"1",function do_node(e,t){let r,_,i;function emit_comma(){i?i=!1:a+=","}function emit_numval(e){e===std.U||(Number.isNaN(e)?(emit_comma(),a+='"e":1'):e===std.INFINITY?(emit_comma(),a+='"e":2'):e===std.NEG_INFINITY?(emit_comma(),a+='"e":3'):(emit_comma(),a+='"n":'+String(e)))}for(r of(n=0!==t,e.children)){if(n?n=!1:a+=",",s%8==7&&(a+="\n"),(s+=1)>=o)break;a+='"^'+String(r.sub)+'":{',i=!0,0!=(r.eflags&std.EF_DIRTY_OR_DERIVED)&&(a+="g:"+String(r.eflags),i=!1),0!=(r.eflags&std.EF_VAL_IS_NUM)?emit_numval(r.val):0!=(r.eflags&std.EF_VAL_IS_STR)?(emit_comma(),a+='"s":'+escape_to_json(r.val)):0!=(r.eflags&std.EF_VAL_IS_MEAS)?(emit_numval((_=r.val).mag),a+=',"m":"'+String(_.unit)+"~"+String(_.family)+"~"+_.unitss+'"'):0!=(r.eflags&std.EF_VAL_IS_IMAGE)?(emit_comma(),a+='"i":0'):0!=(r.eflags&std.EF_VAL_IS_FUNC)?(emit_comma(),a+='"f":0'):0!=(r.eflags&std.EF_VAL_IS_PATH)?(emit_comma(),a+='"p":0'):std.internal_err("bad element kind"),null!==r.markf&&(emit_comma(),a+='"m":ZZZ'),null!==r.children&&(emit_comma(),a+='"c":{',do_node(r,t+1),a+="}"),a+="}"}}(r,0),a+="}"};export function str_to_enum(e){return str_hash_fnv(e)+std.FIRST_ENUM};export function enum_to_str(e,t=!1){let r;return std.CHECKS&&!is_enumb(e)&&std.halt(),r=void 0===std.g_enum_ss[e]?"ENUM:"+to_str(e-=std.FIRST_ENUM,{min:10,zero_pad:std.Y}):std.g_enum_ss[e]};export function from_char(e){return null===e||""===e?std.ERR:e.charCodeAt(0)};export function to_char(e){return Number.isNaN(e)||e===std.U||e<=0?"":String.fromCharCode(e)};export function color_to_hex(e){return"#"+to_str(e,{base:16,min:6,zero_pad:std.Y})};export function num_to_hex(e){let t=new ArrayBuffer(8),r=new Uint8Array(t);new Float64Array(t)[0]=e;for(var s="",n=0;n<8;n++)s+=("00"+r[n].toString(16)).slice(-2);return s};export function hex_to_num(e){if(16!=e.length)return std.ERR;let t=new ArrayBuffer(8),r=new Uint8Array(t),s=0;for(var n=0;n<16;n+=2){var a=parseInt(e.substring(n,n+2),16);r[s]=a,s+=1}return new Float64Array(t)[0]};export function real64_to_str(e,t=std.U,r=1,s=".",n=",",a=!1,o=!1){let _,i,c,d,l,u;if(t===std.U?(_=e.toString()).indexOf(".")<0&&(t=0):_=e.toFixed(t),"."!==s&&(c=/\./,_=_.replace(c,s)),""!==n)for(TRACE_CONV&&console.log("real64, before comma insertion, ss="+_),d=_.length-1,l=0===t?2:1,u=0;!(d<0);){switch(i=_.charAt(d),TRACE_CONV&&console.log("at top of loop, nd="+u+", state="+String(l)+", pos="+String(d)+", cc="+i),l){case 1:"."===i&&(l=2,u=0);break;case 2:i>="0"&&i<="9"&&4===(u+=1)&&(_=_.substr(0,d+1)+n+_.substr(d+1),u=1)}d-=1}for(e>0&&o&&(_="+"+_),a&&e<0&&(_="("+_.substr(1)+")");_.length<r;)_=" "+_;return _};function strip_trailing_zeros(e,t){let r,s,n,a=e.length-1;if(n=0,(r=e.indexOf(t))>=0)for(s=a;;){if("0"!==e.charAt(s)){e.charAt(s)===t&&(n+=1);break}n+=1,s-=1}return 0===n?e:e.slice(0,-n)}export function to_num(e){let t;return e===std.U_STR?std.U:e===std.ERR_STR?std.ERR:(t=Number(e),Number.isNaN(t)?std.ERR:t)};export function is_enumb(e){return e>=std.FIRST_ENUM&&e<=std.LAST_ENUM};export function angle_to_str(e){return to_str(std.to_unit(e,std.N_deg),{digits:1})};export function xy_to_str(e){var t=std.getn(e,std.F_x),r=std.getn(e,std.F_y);return"["+to_str(t,{digits:1})+", "+to_str(r,{digits:1})+"]"};export function rect_to_str(e){var t=std.getn(e,std.F_left),r=std.getn(e,std.F_top),s=std.getn(e,std.F_width),n=std.getn(e,std.F_height);return"["+to_str(t,{digits:1})+",â"+to_str(r,{digits:1})+" "+to_str(s,{digits:1})+"âxâ"+to_str(n,{digits:1})+"]"};export function to_str(e,t=null){let r,s,n,a=10,o="$ ",_=".",i=std.U,c=!1,d=!1,l=!1,u=!1,p=!1,f=!1,g=!1,b=!1,m=!1,h=!1,S=!0,E=!1,R="ENG",x=999,A=0,T=null,k=",",y=std.U;!std.CHECKS||null===t||t instanceof Object||std.argument_err("bad syntax, 2nd parm must be object");for(let e in t)switch(e){case"increase":d=t.increase==std.Y;break;case"decrease":c=t.decrease==std.Y;break;case"base":2!==(a=t.base)&&8!==a&&10!==a&&16!==a&&std.argument_err("internal error, base option not yet implemented");break;case"currency":l=t.currency==std.Y;break;case"currency_cc":o=t.currency_cc;break;case"decimal_cc":_=t.decimal_cc;break;case"human":u=t.human==std.Y;break;case"k":p=t.k==std.Y;break;case"lang":R=t.lang;break;case"max":x=t.max;break;case"min":A=t.min;break;case"neg_paren":f=t.neg_paren==std.Y;break;case"pos_plus":b=t.pos_plus==std.Y;break;case"percent":g=t.percent==std.Y;break;case"digits":i=t.digits;break;case"show_u":m=t.show_u==std.Y;break;case"thou":h=t.thou==std.Y;break;case"thou_cc":k=t.thou_cc;break;case"units":y=t.units;break;case"zero_pad":E=t.zero_pad==std.Y;break;case"zero_drop":S=t.zero_drop==std.Y;break;default:std.argument_err("bad option: "+e)}if(std.CHECKS&&(d||c)&&i===std.U&&std.argument_err("conflicting parms, increase/decrease must have digits specified"),l&&(A-=o.length),e===std.U||null==e)n=m?"U":"",E=!1;else if("string"==typeof e)n='"'+e+'"';else if(e instanceof std.a_meas){let r,s=e;y===std.U?(r=s.family===std.U?" "+s.unitss.split(",").join("â"):" "+enum_to_str(y=std.getn(std.families,s.family,std.F_fam_base)),n=to_str(s.mag,t)+r):n=to_str(std.to_unit(s,y),t)+" "+enum_to_str(y)}else if(e instanceof std.a_path)n=conv_path(e);else if(e instanceof std.a_image){let t=e;n=t.url+" "+String(t.bits.width)+" x "+String(t.bits.height)}else if(e instanceof std.a_function){let t=e;n=t.modname+"."+t.name}else if(e instanceof RegExp)n=e.toString();else if(e instanceof std.a_sound){n=to_str(e.id,t)}else if(e instanceof std.a_sys_gradient){n="gradient:"+e.grad_kind}else if(e instanceof File)n="<FILE:"+e.name+">";else if(e===std.INFINITY)n="INFINITY",E=!1;else if(e===std.NEG_INFINITY)n="-INFINITY",E=!1;else if(e===std.Y)n="Y",E=!1;else if(e===std.N)n="N",E=!1;else if(is_enumb(e))n=enum_to_str(e),E=!1;else if(Number.isNaN(e))n="ERR",E=!1;else{if(p&&(Math.abs(e)>=1e9?(i=Math.abs(e)>=1e10?0:1,e=std.round(e/1e9,-1),T="B"):Math.abs(e)>=1e6?(i=Math.abs(e)>=1e7?0:1,e=std.round(e/1e6,-1),T="M"):Math.abs(e)>=1e3&&(e=std.round(e/1e3),T="K")),c&&Math.abs(e)>=1e3&&(i=0),h||(k=""),10===a)g&&(e*=100,T="%"),n=real64_to_str(e,i,1,_,k,f);else if(16===a)for(n=e.toString(16).toUpperCase();n.length<A-2;)n=E?"0"+n:" "+n;else n=(e>>>0).toString(8===a?8:2);if(d&&/^0\.0+$/.test(n)&&i<4)return s=i,t.digits=i+1,n=to_str(e,t),t.digits=s,n;"."===n.charAt(0)&&(n="0"+n),c&&(n=strip_trailing_zeros(n,_)),S&&(n=strip_trailing_zeros(n,_)),null!==T&&(n+=T)}return(r=A-n.length)>0&&(n=E?str_repeat("0",r)+n:str_repeat(" ",r)+n),l&&(n=o+n),n.length>x&&(n=str_repeat("#",x)),n};function strip_module(e){return e.substring(0,e.indexOf(":"))}export function color_to_rgb_str(e){return e===std.U_COLOR?"rgb(U)":"rgb("+String(std.r255(e))+","+String(std.g255(e))+","+String(std.b255(e))+")"};export function node_to_str(e,t){let r,s,n;if(null!==e)if(e.eflags&std.EF_VAL_IS_U){if(!t)return"";s=":U",n=""}else if(e.eflags&std.EF_VAL_IS_ERR)s=":ERR",n="";else if(e.eflags&std.EF_VAL_IS_NUM)s=":num",n=to_str(e.val);else if(e.eflags&std.EF_VAL_IS_STR)s=":str",n='"'+e.val+'"';else if(e.eflags&std.EF_VAL_IS_IMAGE)s=":image",n="IMAGE";else if(e.eflags&std.EF_VAL_IS_FUNC){s=":func",n=e.val.name}else if(e.eflags&std.EF_VAL_IS_PATH)s=":path",n=conv_path(e.val);else if(e.eflags&std.EF_VAL_IS_MEAS)s=":meas",n="MEAS";else if(e.eflags&std.EF_VAL_IS_SOUND)s=":sound",n="SOUND";else if(e.eflags&std.EF_VAL_IS_GRAD)s=":grad",n="GRAD";else if(e.eflags&std.EF_VAL_IS_BYTES)s=":bytes",n="BYTES";else if(e.eflags&std.EF_VAL_IS_COLOR){s=":color",n=color_to_rgb_str(e.val)}else if(e.eflags&std.EF_VAL_IS_DATE){s=":date";e.val;n="DATE"}else e.eflags&std.EF_VAL_IS_VIDEO?(s=":video",n="VIDEO"):e.eflags&std.EF_VAL_IS_OBJECT?(s=":object",n="OBJECT"):std.argument_err("bad node");else s="<NULL>",n="";return r="",""!==n&&(r+="="+n),r};export function tree_to_str(e,t=null){let r,s,n,a="",o=!0,_=!0,i=std.INFINITY;if(e instanceof std.a_tree)r=std.addr(e);else if(e instanceof std.a_path){if(null===e)return null;r=e}else std.argument_err("expected path or tree");for(let e in t)switch(e){case"prompt":a=t.prompt;break;case"showu":t.showu===std.Y&&(o=!0);break;case"limit":i=t.limit;break;default:std.argument_err("bad option: "+e)}return a+="{",e instanceof std.a_tree?n=e:e instanceof std.a_path?n=std.path_to_node(e):std.argument_err("bad input type, must be tree or path"),function walk_nodes(e,t){let r,n,c;if(null!==e)for(n of e.children){if(r=node_to_str(n,o),""!==(c=t)&&(c+=","),c+=to_str(n.sub),""!==r&&(_?_=!1:a+=", ",a+="["+c+"]",a+=r),(s+=1)>=i){a+="...";break}null!==n.children&&walk_nodes(n,c)}}(n,""),a+="}"};export function str_len(e){return e===std.U_STR?std.U:e===std.ERR_STR?std.ERR:e.length};export function to_upper(e){return e===std.U_STR||e===std.ERR_STR?e:e.toUpperCase()};export function to_lower(e){return e===std.U_STR||e===std.ERR_STR?e:e.toLowerCase()};export function str_repeat(e,t){let r;return e===std.U_STR||e===std.ERR_STR?e:std.is_numeric(t)!==std.Y?std.ERR_STR:(r=Math.round(t))<=0?"":1===r?e:e.repeat(r)};export function str_reverse(e){if(e===std.U_STR||e===std.ERR_STR)return e;if(""===e)return"";let t=e.split("");return t.reverse(),t.join("")};export function str_begins(e,t){if(null===e||null===t)return std.U;let r=e.length,s=t.length;return s>r?std.N:e.substr(0,s)===t?std.Y:std.N};export function str_ends(e,t){if(null===e||null===t)return std.U;let r=e.length,s=t.length;return s>r?std.N:e.substr(r-s,s)===t?std.Y:std.N};export function str_strip_quotes(e){let t,r,s,n;return e===std.U_STR||e===std.ERR_STR?e:(s=!1,r=e.length,(n=e.charCodeAt(r-1))!==CODE_SQUOTE&&n!==CODE_DQUOTE||(r-=1,s=!0),t=0,(n=e.charCodeAt(0))!==CODE_SQUOTE&&n!==CODE_DQUOTE||(t=1,r-=1,s=!0),s?e.substr(t,r):e)};export function str_trim(e){return null==e?null:e.trim()};export function pad_left(e,t,r){if(e===std.U_STR||e===std.ERR_STR)return e;let s=" ";for(let e in r)switch(e){case"pad":s=r.pad.charAt(0);break;default:std.argument_err("bad option: "+e)}let n=t-e.length;for(;n>0;)e=s+e,n-=1;return e};export function pad_right(e,t,r){if(e===std.U_STR||e===std.ERR_STR)return e;let s=" ";for(let e in r)switch(e){case"pad":s=r.pad.charAt(0);break;default:std.argument_err("bad option: "+e)}let n=t-e.length;for(;n>0;)e+=s,n-=1;return e};export function subset(e,t){let r,s,n,a,o=1,_=std.U,i=std.U;if(e===std.U_STR||e===std.ERR_STR)return e;for(let e in t)switch(e){case"rev":r=t.rev===std.Y;break;case"from":o=t.from;break;case"to":i=t.to;break;case"len":_=t.len;break;default:std.argument_err("bad option: "+e)}return std.is_err_enum(o)===std.Y||std.is_err(_)===std.Y||std.is_err(i)===std.Y?ERROR_STRING:(_===std.U&&i===std.U&&(_=999999999),_<=0?"":(o<std.FIRST&&(std.CHECKS&&std.argument_err("strings start at 1"),o=std.FIRST),o>(s=e.length)?"":r?_!==std.U?(n=s-o-(_-1),e.substr(n,_)):(n=s-i,a=s-o+1,e.substring(n,a)):(n=o-1,_!==std.U?e.substr(n,_):e.substring(n,i))))};export function str_digit(e,t){let r,s,n=std.N,a=1;if(e===std.U_STR)return std.U;if(e===std.ERR_STR)return std.ERR;for(let e in t)switch(e){case"from":a=t.from;break;case"rev":n=t.rev;break;default:std.argument_err("bad option: "+e)}return(s=from_char(r=subset(e,{from:a,rev:n,len:1})))>=CODE_0&&s<=CODE_9?s-CODE_0:std.ERR};export function str_ins(e,t,r){if(e===std.U_STR||t==std.U_STR)return std.U_STR;if(e===std.ERR_STR||t==std.ERR_STR)return std.ERR_STR;let s=std.U,n=!1,a=0,o=e.length;for(let e in r)switch(e){case"del":if(a=r.del,std.is_numeric(a)!=std.Y)return std.ERR_STR;a<0&&(a=0);break;case"to":if(s=r.to,std.is_numeric(s)!=std.Y)return std.ERR_STR;s<1&&(s=1);break;case"rev":n=r.rev==std.Y;break;default:std.argument_err("bad option: "+e)}return n&&(s=o+1-s),e.slice(0,s-1)+t+e.slice(s-1+a)};export function str_del(e,t){if(e===std.U_STR)return std.U_STR;if(e===std.ERR_STR)return std.ERR_STR;let r=1,s=std.U,n=std.U,a=!1,o=e.length;for(let e in t)switch(e){case"from":if(r=t.from,std.is_numeric(r)!=std.Y)return std.ERR_STR;r<1&&(r=1);break;case"to":if(s=t.to,std.is_numeric(s)!=std.Y)return std.ERR_STR;s<1&&(s=1);break;case"len":if(n=t.len,std.is_numeric(n)!=std.Y)return std.ERR_STR;if(n<=0)return"";break;case"rev":a=t.rev==std.Y;break;default:std.argument_err("bad option: "+e)}if(s!=std.U){if(s<r)return e}else n!=std.U?s=r+n-1:std.argument_err("must specify either to: or len:");if(a){let e=s;s=o+1-r,r=o+1-e}return e.slice(0,r-1)+e.slice(s)};export function str_to_regexp(e,t){var r=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");return t?new RegExp(r,"gi"):new RegExp(r,"g")};export function str_find(e,t,r,s,n,a){let o,_,i,c,d,l,u,p=!1,f=0,g=1,b=!1,m=0;if(std.trunc_tree(e,t,n),null!==r&&""!==r&&r!==std.ERR_STR&&null!==s&&""!==s&&s!==std.ERR_STR){for(let e in a)switch(e){case"start":f=a.start-1;break;case"reps":g=a.reps;break;case"wrap":a.wrap===std.Y&&(p=!0);break;case"ignore_case":b="Y"==a.ignore_case;break;default:std.argument_err("bad option: "+e)}if("string"==typeof s)u=str_to_regexp(s,b);else{if(!(s instanceof RegExp))return void(std.CHECKS&&std.argument_err("bad pattern"));u=s}for(_=!p,o=r.length,u.lastIndex=f;m<g;){if(null!==(i=u.exec(r))){if(c=i.index,d=u.lastIndex,TRACE_FIND&&console.log(conv("  MATCH, m_start={}, m_end={}",c,d)),m+=1,std.setv(e,t,n,m,F_find_start,c+1),l=d-c,std.setv(e,t,n,m,F_find_len,l),m>=g)break}else TRACE_FIND&&console.log("--not found"),u.lastIndex=o;if(u.lastIndex>=o){if(_)break;TRACE_FIND&&console.log(" doing wrap, starting at top"),_=!0,u.lastIndex=0,o=f}}}};export function str_pos(e,t,r){var s=0,n=!1,a=new a_tree("str","str_pos");if(e===std.ERR_STR||t===std.ERR_STR)return std.ERR;if(null===e||""===e||null===t||""===t)return std.U;for(var o in r)switch(o){case"start":s=r.start-1;break;case"ignore_case":n="Y"==r.ignore_case;break;default:std.argument_err("bad option: "+o)}return str_find(_M,0,e,t,std.addr(a),{start:s,ignore_case:n}),std.getn(a,1,F_find_start)};export function str_replace(e,t,r){return e.replace(t,r)};export function str_replace_multiple(e,t,r){let s,n,a,o,_,i,c,d,l=e,u=0,p=!1;if(null===e||""===e)return e;for(let e in r)switch(e){case"trace":r.trace===std.Y&&(p=!0);break;default:std.argument_err("bad option: "+e)}let f=new std.a_loop({across:t});for(;f.next();)for(o=f.path,s=f.index,n=std.get_generic(o,F_find_patt),a=std.gets(o,F_repl_patt),n.lastIndex=0;null!==(_=n.exec(l));){c=_.index,d=n.lastIndex;for(var g,b=[],m=0;;){if(!((g=a.indexOf("$",m))>=0&&(h=a.charAt(g+1),h>="0"&&h<="9"))||0!=g&&"\\"==a.charAt(g-1)){add_fragment(m,a.length);break}add_fragment(m,g),b.push(Number(a.charAt(g+1))),m=g+2}i=calc_replacement(b,_),p&&(u+=1,log_context(String(s),l,c,d,i)),l=l.substring(0,c)+i+l.substring(d),n.lastIndex+=i.length-(d-c)}var h;return p&&console.log("--- did "+String(u)+" replacements"),l;function add_fragment(e,t){if(t>e){let r=a.substring(e,t);b.push(r)}}};function calc_replacement(e,t){let r,s,n="";for(r of e)"string"==typeof r?n+=r:"number"==typeof r?(s=r)>=0&&s<t.length&&(n+=t[s]):std.argument_err("bad target");return n}function log_context(e,t,r,s,n){let a,o,_,i,c,d,l=t.length;for(_=r,i=0,a="ã";!((_-=1)<0);){if("\n"===(d=t.charAt(_))||"\r"===d){a="Â¬"+a;break}if(a=(d=net_log_cc(d))+a,(i+=1)>17){a="..."+a;break}}for(_=s,o="ã",c=0;!(_>=l);){if("\n"===(d=t.charAt(_))||"\r"===d){o+="Â¬";break}if(o+=d=net_log_cc(d),(c+=1)>40){o+="...";break}_+=1}console.log("\npattern "+e+", start="+String(r)),console.log("   "+a+net_log_ss(t.substring(r,s))+o),console.log("   "+a+net_log_ss(n)+o)}function net_log_ss(e){let t,r="",s=e.length;for(t=0;t<s;t++)r+=net_log_cc(e.charAt(t));return r}function net_log_cc(e){return"\t"===e?"â²":"\n"===e||"\r"===e?"Â¬":e<" "?"âª":e}export function str_inject(e,...t){let r,s=e;for(let e in t)r="$"+String(1),s=s.replaceAll(r,e);return s};export function split_words(e,t,r,s,n){let a,o,_,i,c,d="\t".charCodeAt(0);for(let e in n)switch(e){case"delim":d=n.delim.charCodeAt(0);break;default:std.argument_err("bad option: "+e)}function emit_fragment(n,a){let o;_+=1,o=a>n?r.substring(n,a):"",TRACE_SPLIT&&console.log(conv(" splitting word[{int}], ss={str}",_,o)),std.setv(e,t,s,_,o)}if(std.trunc_tree(e,t,s),null!=r&&r!=std.ERR_STR&&0!==(o=r.length))for(_=0,i=0,a=0;;){if(i>=o){i>a&&emit_fragment(a,i);break}c=r.charCodeAt(i),i+=1,c===d&&(emit_fragment(a,i-1),a=i)}};export function split_lines(e,t,r,s){let n,a,o,_,i;function emit_fragment(n,a){let _;o+=1,_=a>n?r.substring(n,a):"",TRACE_SPLIT&&console.log(conv(" adding line {int} with ss={str}",o,_)),std.setv(e,t,s,o,_)}if(std.trunc_tree(e,t,s),null!=r&&r!=std.ERR_STR&&0!==(a=r.length))for(o=0,_=0,(i=r.charCodeAt(0))!==BOM_UTF16_LE&&i!==BOM_UTF16_BE||(_+=1),n=_;;){if(_>=a){_>n&&emit_fragment(n,_);break}i=r.charCodeAt(_),_+=1,i===CODE_CR?(g_delimiter=DELIM_CR,emit_fragment(n,_-1),_<a&&r.charCodeAt(_)===CODE_NL&&(_+=1,g_delimiter=DELIM_CRLF),n=_):i===CODE_NL&&(emit_fragment(n,_-1),n=_,g_delimiter=DELIM_LF)}};export function split_lines_words(e,t,r,s,n){const a=!0;let o,_,i,c,d,l,u,p,f,g="\t",b=!0;function emit_token(){if(o.length>0){if(a){let e=0,t=o.length-1;for(;t>=0&&" "===o.charAt(t);)t-=1,e+=1;e>0&&(o=o.substring(0,t+1))}TRACE_SPLIT&&console.log(conv(" adding cell[{int},{int}] with ss=[{str}]",c,d,o)),std.setv(e,t,s,c,d,o)}o="",p=!0,f=!1}if(std.trunc_tree(e,t,s),null!=r&&r!=std.ERR_STR&&0!==(i=r.length)){for(let e in n)switch(e){case"quotes":b=n.quotes===std.Y;break;case"delim":g=n.delim;break;default:std.argument_err("bad option: "+e)}for(c=1,d=1,l=0,f=!1,p=!0,o="",(u=r.charCodeAt(0))!==BOM_UTF16_LE&&u!==BOM_UTF16_BE||(l+=1);;){if(l>=i){emit_token();break}if(_=r.charAt(l),l+=1,'"'===_&&b){if(p){p=!1,f=!0;continue}if(l<i&&'"'===r.charAt(l)){o+='"',l+=1;continue}f=!1}else if(" "!==_||0!==o.length){if(f){if(_===CR){l<i&&r.charAt(l)===LF&&(l+=1),o+=LF,p=!1;continue}if(_===LF){o+=LF,p=!1;continue}}else{if(_===CR){l<i&&r.charAt(l)===LF&&(l+=1),emit_token(),c+=1,d=1;continue}if(_===LF){emit_token(),c+=1,d=1;continue}if(_===g){emit_token(),d+=1;continue}}o+=_,p=!1}else p=!1}}};export function escape_to_json(e){let t,r="",s=e.length;for(let n=0;n<s;n++)switch(t=e.charAt(n)){case'"':r+='\\"';break;case"\\":r+="\\\\";break;case"\b":r+="\\b";break;case"\f":r+="\\f";break;case"\n":r+="\\n";break;case"\r":r+="\\r";break;case"\t":r+="\\t";break;default:if(t<" "){let e=t.charCodeAt(0).toString(16);r+="\\u"+(2===e.length?"00":"000")+e}else r+=t}return'"'+r+'"'};export function str_range(e,t,r=99999999999999){return 0===e.length||std.is_numeric(t)!==std.Y||std.is_numeric(r)!==std.Y?"":(t<0&&(t=0),r>e.length&&(r=e.length),e.slice(t,r))};export function rgb_str(e){return"R:"+String(std.r255(e))+" G:"+String(std.g255(e))+" B:"+String(std.b255(e))};export function rgb_hex_str(e){return"0x"+to_str(e,{base:16,min:6,zero_pad:std.Y})};export function rgb_html_str(e){return"#"+to_str(e,{base:16,min:6,zero_pad:std.Y})};export function conv(e,...t){let r,s,n,a,o,_,i,c,d;for(a=0,i=0,_=e.length,o=0,s="",r="",a=0;a<_;a++)switch(n=e.charAt(a),o){case 0:"{"!==n||0!==a&&"\\"===e.charAt(a-1)?s+=n:(r+=s,s=n,o=1);break;case 1:if("}"===n){switch(s+="}"){case"{}":if(null===(d=t[i])||void 0==d)s="U";else if("number"==typeof d||"number"==typeof d)s=to_str(d,{digits:3,decrease:std.Y,show_u:std.Y});else if("string"==typeof d)s=d;else if("boolean"==typeof d)s=conv_bool(d);else if(d instanceof std.Rectangle)s=conv_rect(d);else if(d instanceof std.a_tree){s=d.sub}else if(d instanceof std.a_path)s=conv_path(d);else if(d instanceof std.a_pathh)s=conv_pathh(d);else if(d instanceof std.a_pathx)s=conv_pathx(d);else if(d instanceof std.a_meas){s=to_str(d.mag,{digits:3,decrease:std.Y,show_u:std.Y})}else if(d instanceof std.a_image)s="image:"+d.alt;else if(d instanceof std.Bitmap){let e=d;s=conv("bitmap[{} x {}]",e.width,e.height)}else if(d instanceof Function)s="<function>";else if(d instanceof std.a_function){let e=d;s=e.modname+"."+e.name}else d instanceof RegExp?s=d.toString():std.argument_err("bad type");break;case"{a_xy}":(d=t[i])instanceof std.a_tree||d instanceof std.a_path?s="["+to_str(std.getn(d,std.F_x))+" "+to_str(std.getn(d,std.F_y))+"]":std.argument_err("expecting a tree or path type");break;case"{array}":(d=t[i])instanceof Array?s=conv_array(d):std.argument_err("expecting a Array type");break;case"{bool}":"boolean"==typeof(d=t[i])?s=conv_bool(d):std.argument_err("expecting a Boolean type");break;case"{uri}":"string"==typeof(d=t[i])?s=conv_uri(d):std.argument_err("expecting a String type");break;case"{e}":s=to_str(std.elapsed,{digits:3}),i-=1;break;case"{hex}":"number"==typeof(d=t[i])?s=conv_num_to_hex(d):std.argument_err("expecting a number type");break;case"{int}":s=String(t[i]);break;case"{key}":t[i]instanceof Array?s=conv_vector_num(t[i]):std.argument_err("expecting a path key");break;case"{meas}":t[i]instanceof std.a_meas?s=to_str(t[i],{digits:3,decrease:std.Y,show_u:std.Y}):std.argument_err("expecting a meas type");break;case"{num}":"number"==typeof t[i]?s=real64_to_str(t[i],0,1,"",""):std.argument_err("expecting a num type");break;case"{n}":case"{n0}":case"{n,0}":"number"==typeof t[i]?s=to_str(t[i]):std.argument_err("expecting a num type");break;case"{n1}":case"{n2}":case"{n3}":case"{n4}":case"{n5}":case"{n6}":case"{n7}":case"{n8}":case"{n9}":"number"==typeof t[i]?(c=parseInt(s.charAt(2),10),s=to_str(t[i],{digits:c})):std.argument_err("expecting a num type");break;case"{n,1}":case"{n,2}":case"{n,3}":case"{n,4}":case"{n,5}":case"{n,6}":case"{n,7}":case"{n,8}":case"{n,9}":"number"==typeof t[i]?(c=parseInt(s.charAt(3),10),s=to_str(t[i],{digits:c})):std.argument_err("expecting a num type");break;case"{hpath}":null===t[i]?s="null":t[i]instanceof std.a_pathh?s=conv_pathh(t[i]):std.argument_err("expecting a pathh type");break;case"{path}":null===t[i]?s="null":t[i]instanceof std.a_path?s=conv_path(t[i]):std.argument_err("expecting a path type");break;case"{pathx}":null===t[i]?s="null":t[i]instanceof std.a_pathx?s=conv_pathx(t[i]):std.argument_err("expecting a pathx type");break;case"{rect}":null===t[i]?s="null":t[i]instanceof std.Rectangle?s=conv_rect(t[i]):t[i]instanceof std.a_tree||t[i]instanceof std.a_path?s=conv_tree_rect(t[i]):std.argument_err("expecting a Rectangle type");break;case"{rgb}":"number"==typeof t[i]?s=rgb_str(t[i]):std.argument_err("expecting a rgb color as uint type");break;case"{rgb_hex}":"number"==typeof t[i]||"number"==typeof t[i]?s=rgb_hex_str(t[i]):std.argument_err("expecting a rgb color as uint type");break;case"{rgb_html}":"number"==typeof t[i]||"number"==typeof t[i]?s=rgb_html_str(t[i]):std.argument_err("expecting a rgb color as numeric type");break;case"{str}":"string"==typeof t[i]?s=t[i]:std.argument_err("expecting a string type");break;case"{tree}":t[i]instanceof std.a_path||t[i]instanceof std.a_tree?s=tree_to_str(t[i]):std.argument_err("expecting a tree type");break;default:std.argument_err("unknown conversion type")}o=0,i+=1,r+=s,s=""}else s+=n}return i!==t.length&&std.argument_err("parameter number mismatch"),r+=s};function conv_pathx(e){let t,r;if(null===e)return"[null pathx]";for(t=e.basepath.base instanceof std.a_tree?e.basepath.base.label:"â"+std.TREES[e.basepath.base].label,t+="[",r=1;r<=e.lastx;r++){r>1&&(t+=", ");let s=e.lev[r].sub;t+="string"==typeof s?s:to_str(s,{show_u:std.Y})}return t+="]"}export function conv_path(e){let t,r,s=!0;if(null===e)return"[null path]";for(r of(t=e.base instanceof std.a_tree?e.base.label:"â"+std.TREES[e.base].label,t+="[",e.key))s?s=!1:t+=", ",t+="string"==typeof r?r:to_str(r,{show_u:std.Y});return t+="]"};export function conv_pathh(e){let t,r,s=!0;if(null===e)return"[null pathh]";for(r of(t=e.base.label+"[",e.key))s?s=!1:t+=", ",t+="string"==typeof r?r:to_str(r);return t+="]"};export function conv_bool(e){return e?"T":"F"};export function conv_num_to_hex(e){let t,r,s,n="",a=std.new_bytes(8,std.BIG_END);for(std.bytes_put_num(a,e),a.position=0,r=0;r<8;r++)n+=t=conv_hex_byte(s=std.bytes_get_card8(a));return n};export function conv_hex_byte(e){let t;return(e<0||e>255)&&std.argument_err("above ascii characters not yet implemented"),1===(t=e.toString(16)).length&&(t="0"+t),t};export function conv_unicode_to_bytes(e){let t,r,s,n=std.new_bytes(10,std.BIG_END),a="";for(std.bytes_put_str(n,e),s=n.position-2,n.position=2,r=0;r<s;r++)a+="%"+conv_hex_byte(t=std.bytes_get_card8(n));return e};export function conv_uri(e){let t,r,s,n="",a=e.length;for(t=0;t<a;t++)n+=(r=e.charAt(t))>="A"&&r<="Z"||r>="a"&&r<="z"||r>="0"&&r<="9"||"*"===r||"-"===r||"."===r||"/"===r||"_"===r?r:r<="~"?"%"+conv_hex_byte(s=from_char(r)):conv_unicode_to_bytes(r);return n};export function conv_dict(e){let t,r="[";for(t in e)r+=conv_num(t)+" ";return r+="]"};export function conv_vector_num(e){let t,r="[",s=!0;for(t of e)s?s=!1:r+=", ",r+=to_str(t);return r+="]"};export function conv_array(e){let t,r="[",s=!0;for(t=0;t<e.length;t++)s?s=!1:r+=", ","number"==typeof e[t]?r+=to_str(e[t]):r+=String(e[t]);return r+="]"};export function conv_num(e){return to_str(e)};export function conv_n(e){return to_str(e)};export function conv_tree_rect(e){return conv("[{n1},{n1} {n1}x{n1}]",std.getn(e,std.F_left),std.getn(e,std.F_top),std.getn(e,std.F_width),std.getn(e,std.F_height))};export function conv_rect(e){return conv("[{n1},{n1} {n1}x{n1}]",e.left,e.top,e.width,e.height)};const g_base64_encode=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],g_base64_decode=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];export function bytes_to_base64(e){let t,r=4*(2+e.length-(e.length+2)%3)/3,s=std.new_bytes(r),n=0,a=e.length%3,o=e.length-a,_=0;for(;n<o;)t=e[n++]<<16|e[n++]<<8|e[n++],s[_++]=g_base64_encode[t>>>18],s[_++]=g_base64_encode[t>>>12&63],s[_++]=g_base64_encode[t>>>6&63],s[_++]=g_base64_encode[63&t];return 1===a?(t=e[n],s[_++]=g_base64_encode[t>>>2],s[_++]=g_base64_encode[(3&t)<<4],s[_++]=61,s[_++]=61):2===a&&(t=e[n++]<<8|e[n],s[_++]=g_base64_encode[t>>>10],s[_++]=g_base64_encode[t>>>4&63],s[_++]=g_base64_encode[(15&t)<<2],s[_++]=61),s.readUTFBytes(s.length)};export function base64_to_bytes(e){let t,r,s,n,a=0,o=e.length,_=Math.ceil(3*o/4)+2,i=std.new_bytes(_);i.writeUTFBytes(e);let c=0;for(;a<o&&-1!==(t=g_base64_decode[i[a++]])&&-1!==(r=g_base64_decode[i[a++]])&&(i[c++]=t<<2|(48&r)>>4,61!==(s=i[a++]))&&-1!==(s=g_base64_decode[s])&&(i[c++]=(15&r)<<4|(60&s)>>2,61!==(n=i[a++]))&&-1!==(n=g_base64_decode[n]);)i[c++]=(3&s)<<6|n;return i.length=c,i.position=0,i};export function str_add_meta(){std.VAL,std.POP};